1
00:00:00,360 --> 00:00:08,880
では、具体的にリポジトリとかファクトリーとか処理を担当するクラスを考えていきましょう。

2
00:00:10,200 --> 00:00:11,790
そうするとですね。

3
00:00:12,150 --> 00:00:13,020
まず。

4
00:00:14,840 --> 00:00:18,980
社員情報とタスク情報の存在チェックですね。

5
00:00:18,980 --> 00:00:20,120
存在チェック。

6
00:00:20,480 --> 00:00:23,120
これはどの実装パターンに当てはまるでしょうか。

7
00:00:24,300 --> 00:00:29,910
これは実装パターンでいうところのドメインサービスに当てはまります。

8
00:00:30,590 --> 00:00:33,230
ドメインサービスが何だったかというと。

9
00:00:34,510 --> 00:00:35,560
これですね。

10
00:00:35,890 --> 00:00:42,940
エンティティのメソッドに書き出すと不自然、もしくは煩雑になる処理を切り出しましょうというお話でしたで。

11
00:00:43,710 --> 00:00:53,940
このISイグジストを持たせるといいですよと書いたのはなぜかというと、タスクエンティティとか社員エンティティの自分自身が存在チェックをする

12
00:00:53,940 --> 00:00:55,440
っておかしいですよねと。

13
00:00:56,220 --> 00:01:02,340
お伝えしましたなので、存在チェックはドメインサービスとして責務を切り出しておきましょう。

14
00:01:02,880 --> 00:01:03,660
なので。

15
00:01:06,780 --> 00:01:17,490
存在チェック用のドメインサービスがこの後に入るはずですねと存在チェックのドメインサービス。

16
00:01:17,490 --> 00:01:18,630
ちょっと略しますね。

17
00:01:19,050 --> 00:01:20,040
そして。

18
00:01:21,450 --> 00:01:25,590
対象は社員とタスクですねと見えてきます。

19
00:01:25,950 --> 00:01:27,510
そうすると。

20
00:01:29,650 --> 00:01:31,480
この社員と。

21
00:01:33,340 --> 00:01:35,110
翼っていうのは。

22
00:01:38,780 --> 00:01:45,580
まずは、このドメインサービスが参照する相手として見えてきました。

23
00:01:50,700 --> 00:01:51,840
こんな具合ですね。

24
00:01:57,940 --> 00:02:00,580
そうした後に。

25
00:02:02,290 --> 00:02:02,560
ちょっと。

26
00:02:02,560 --> 00:02:07,540
これは直接線でつないでいないのにはちょっと理由があるので、この後御説明します。

27
00:02:08,639 --> 00:02:16,860
そして続きを見ると、存在チェックが終わったら、じゃあスレッドを作成してデータベースに保存したいよねというお話でした。

28
00:02:17,640 --> 00:02:21,870
じゃあ、スレッドを作成してデータベースに保存するっていうのはどんな。

29
00:02:22,980 --> 00:02:33,450
実装パターンに当てはまるかというと、まずスレットをデータベースに保存する前にスレッドインスタンスを作らないといけないですよねとお伝えしまし

30
00:02:33,450 --> 00:02:33,660
た。

31
00:02:34,700 --> 00:02:39,470
じゃあ、THREADインスタンスを作る責務はファクトリーですねとお伝えしました。

32
00:02:39,800 --> 00:02:46,100
そして、じゃあスレッドを作るためのファクトリーが何の責務を担うかというと存在。

33
00:02:46,100 --> 00:02:54,680
チェックタスクをインスタンス化スレッドをインスタンス化、そしてスレッド数の上限チェックというものを責務で担いますよという風にご説明しました。

34
00:02:54,980 --> 00:03:04,490
まぁ、これは存在チェックを別の責務で切り出して、ファクトリーに持たせないっていう設計パターンもあるにはあるんですけれども、そこはもう

35
00:03:04,520 --> 00:03:12,860
現場毎のルールに合わせていただければいいので、私はこの存在チェックをファクトリーの中に入れた方がまとまりとして見やすいよねと考えます。

36
00:03:13,520 --> 00:03:19,670
なので存在チェックインスタンス化インスタンス化上限チェックっていうこの4つを。

37
00:03:22,220 --> 00:03:25,040
スレッド作成サービスの後に持たせましょう。

38
00:03:25,040 --> 00:03:26,540
そうするとですね。

39
00:03:27,620 --> 00:03:32,960
コントロールオブジェクトがまずですね。

40
00:03:33,650 --> 00:03:37,700
FACTORYとリポジトリーの2つが必要ですねと見えてきました。

41
00:03:40,140 --> 00:03:40,290
あ。

42
00:03:41,020 --> 00:03:53,500
ちなみにリポジトリは先程ご説明しなかったんですけども、FACTORYでスレッドオブジェクトタスクオブジェクトをインスタンス化したあと、このまとまり

43
00:03:53,500 --> 00:03:54,340
ごと。

44
00:03:55,590 --> 00:03:57,900
保存しましょうとこれですね。

45
00:03:57,900 --> 00:04:08,700
タスクインスタンスの中にスレッドを内包させて、スレッドは5個までっていうチェックを行った後、リポジトリーを経由してまるごとデータベースに保存

46
00:04:08,700 --> 00:04:10,350
しましょうというお話でした。

47
00:04:10,920 --> 00:04:11,910
なので。

48
00:04:13,330 --> 00:04:20,550
インスタンスを作るためのファクトリーと、そして保存するためのリポジトリーが必要ですというロジックになっていきます。

49
00:04:21,010 --> 00:04:21,850
なので。

50
00:04:22,570 --> 00:04:28,660
タスク作成サービスの後に来るべきはまずは。

51
00:04:31,560 --> 00:04:35,790
ファクトリーとリポジトリですねと見えてきました。

52
00:04:36,950 --> 00:04:50,120
なので、まずこのファクトリーがここにありまして、リポジトリーがありましてとなのでそれと作成サービスから船を飛ばすべきはこの2つですねと

53
00:04:50,150 --> 00:04:51,650
整理ができます。

54
00:04:52,790 --> 00:04:55,130
そしてファクトリーが。

55
00:04:56,120 --> 00:04:57,800
持つべき責務は。

56
00:04:59,100 --> 00:05:00,060
存在チェック。

57
00:05:00,060 --> 00:05:05,640
そしてタスクのインスタンス化スレッドのインスタンス化、そして上限チェックという風になってきました。

58
00:05:05,670 --> 00:05:06,750
なので。

59
00:05:08,990 --> 00:05:09,740
まず。

60
00:05:16,370 --> 00:05:17,720
インスタンス化ですね。

61
00:05:17,720 --> 00:05:18,740
インスタンス生成。

62
00:05:24,320 --> 00:05:30,740
で、インスタンスの生成対象はタスクとスレッドなので。

63
00:05:32,920 --> 00:05:42,040
ここのスレッドもこっちに持ってきてで、インスタンスの生成対象としてここにつないでおきましょうでこうですね。

64
00:05:42,940 --> 00:05:43,510
なので。

65
00:05:44,570 --> 00:05:50,390
ここでインスタンスの生成対象としてタスクとスレッドが繋がりましたよというお話です。

66
00:05:51,510 --> 00:05:55,110
なのでファクトリーの責務としてまず存在チェック。

67
00:05:55,110 --> 00:05:58,740
そしてインスタンス生成最後。

68
00:06:00,480 --> 00:06:02,250
上限数のチェックですね。

69
00:06:06,600 --> 00:06:10,470
上限チェックを行いましょうという具合です。

70
00:06:13,440 --> 00:06:14,310
こうですね。

71
00:06:21,880 --> 00:06:26,770
では、ちょっと並びが汚いので、少しきれいに整理してあげましょうか。

72
00:06:29,450 --> 00:06:34,970
これを上の方に持ってきて、インスタンス生成を少し上に持ってきて。

73
00:06:39,490 --> 00:06:43,330
そして上限数チェックをここに持ってきて。

74
00:06:49,690 --> 00:06:50,980
こういった具合ですね。

75
00:06:54,360 --> 00:06:56,850
少し見やすくするために並びを整えました。

76
00:07:03,230 --> 00:07:12,080
そしてその後じゃリポジトリがどんな処理を行うかというと、もうシンプルで保存するっていうものがあれば十分だと思います。

77
00:07:12,620 --> 00:07:22,040
なのでリポジトリに最後保存するというものを処理として持たせてあげれば十分ではないでしょうか。

78
00:07:27,980 --> 00:07:29,180
なのでまあ。

79
00:07:31,270 --> 00:07:33,880
特にスレと作成サービスに難しい。

80
00:07:33,910 --> 00:07:40,360
独創的な発想は必要なくて、それと作成サービスが持つべき責務というものは存在。

81
00:07:40,360 --> 00:07:45,730
チェックして、そしてスレッドを作成して保存しましょうとまぁ、シンプルにそれだけです。

82
00:07:45,730 --> 00:07:49,840
そしてじゃあインスタンスを作成する際に存在。

83
00:07:49,840 --> 00:07:55,240
チェックして、そしてインスタンスをタスクとスレッドを作って、そして。

84
00:07:56,220 --> 00:08:04,060
ドメインモデルを作った時に、タスクに紐づくスレッドは5個までというふうに上限を設けたので、上限チェックを入れましょうとそう。

85
00:08:04,090 --> 00:08:06,030
そういったようにもうすでに決めてある。

86
00:08:06,060 --> 00:08:10,980
すでに決めてあるルールをただただ表現していくだけなので難しい。

87
00:08:10,980 --> 00:08:13,590
新しい論点はなかったんじゃないかなと思います。

88
00:08:13,860 --> 00:08:20,060
まあ、これでスレッド作成サービスが持つべき1連の処理責務が明確になりました。

