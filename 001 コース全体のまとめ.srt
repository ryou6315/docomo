1
00:00:01,120 --> 00:00:04,720
それでは、最後コース全体のまとめを行っておきましょう。

2
00:00:05,930 --> 00:00:06,830
まず。

3
00:00:07,680 --> 00:00:14,400
このセクションの内容としては、コース全体のまとめとあとはさらに学びたい人のための補足情報をご用意してあります。

4
00:00:15,100 --> 00:00:22,090
で、まずコース全体のまとめとしては20枚のスライドをもう一回お見せしながら復習していこうと思います。

5
00:00:23,080 --> 00:00:25,000
まずこのコンセプト。

6
00:00:25,000 --> 00:00:33,700
この酵素のコンセプトとしては、ビジネス的な機能性とエンジニア的な保守性の両方の視点からどうやって価値の高いプロダクトを生み出せばいい

7
00:00:33,700 --> 00:00:34,180
のか。

8
00:00:34,180 --> 00:00:43,450
そこを設計の観点から徹底的に言語化されていない感と経験を明文化しようというモチベーションのもと作った講座になっています。

9
00:00:44,740 --> 00:00:55,720
そしてじゃあ、どんな勘と経験が言語化されていないかというと、ビジネスの企画構想段階からプロダクトが実装されていく上で、どんどん

10
00:00:55,750 --> 00:01:02,110
どんどん途中の考慮漏れだったり、あとは情報を伝達の抜け落ち情報劣化によって。

11
00:01:03,270 --> 00:01:11,820
プロダクトが完成したときになんか違うっていう現象が結構起きがちですよねっていうところですで、ここの危機察知能力が言語化されていない

12
00:01:11,820 --> 00:01:14,550
んじゃないかというアプローチでコースをつくりました。

13
00:01:15,520 --> 00:01:17,080
じゃあ言語化されていない。

14
00:01:17,080 --> 00:01:29,260
監督経験っていうのは、ビジネスの親子構想から実装までに5つの段階があって、途中で要件定義設計基本設計詳細設計というものを挟んでいく

15
00:01:29,290 --> 00:01:38,560
中で、途中途中でどんどん情報が抜け落ちて劣化していって結果的に想定と違うプロダクト実装が行われてしまいますよねというお話でした。

16
00:01:39,100 --> 00:01:50,200
で2つポイントがあって、ビジネス構想から要件定義を作る段階でモデリングできっちりとビジネス要件とか隠れたルールの抜け漏れを拾い集めるモデリング

17
00:01:50,200 --> 00:02:01,390
をやりましょうというところ、そして基本設計と詳細設計では、実装パターンを使って、保守性の高い責務ごとに責務ごとに切り分けられたクラス

18
00:02:01,390 --> 00:02:04,210
設計をやっていきましょうと、そういう話をお伝えしてきました。

19
00:02:05,420 --> 00:02:16,730
で、結果的にビジネス構造とコードの構造が一致すると使いやすくて機能性が高くて、しかも保守しやすいっていうシステムになりますよねと

20
00:02:16,730 --> 00:02:17,620
お伝えしました。

21
00:02:18,900 --> 00:02:29,460
で、それらをハンドリングするためには2種類の手法があるとお伝えしまして、ウォーターフォール開発は数ヶ月から178カ月ぐらいですかね。

22
00:02:29,460 --> 00:02:39,870
最長それらの長いスパンでみる開発で人事労務システムとかいったような勤怠管理したいとか給与計算したいとか該当する。

23
00:02:39,870 --> 00:02:49,380
業務フローとか法律が明確なときにウォーターフォールを使って、例えば予算管理とかあとは退職の前兆を予知したいとか、そういった不確定な要素

24
00:02:49,380 --> 00:02:55,020
に関しては、アジャイルで23週間スパンで細かく開発するといいですよねとお伝えしてあります。

25
00:02:56,620 --> 00:03:02,620
で、それらを踏まえて上流工程で関係者といろいろと調整しなきゃいけないんです。

26
00:03:02,650 --> 00:03:07,870
これはウォーターフォールであっても、アジャイルであっても共通して発生するタスクです。

27
00:03:07,900 --> 00:03:15,250
それが4段階あって企画要件定義基本設計、詳細設計、そしてさまざまな関係者がいるので。

28
00:03:16,540 --> 00:03:22,900
それぞれ4つの観点からどういうふうにコミュニケーションしていくと、プロジェクトが円滑に回るのかというのをお伝えしました。

29
00:03:24,470 --> 00:03:37,250
そしてそこから実戦ワークに入っていきまして、音ドリンクでビジネス要件の分析を行う抽象的な情報の取りまとめから基本設計詳細設計に向けて

30
00:03:37,250 --> 00:03:45,320
具体的なフォーマットに落とし込むというふうに、抽象的なビジネス要件から具体的な設計フォーマットに落とし込む。

31
00:03:45,320 --> 00:03:46,530
そこをやっていきました。

32
00:03:48,520 --> 00:03:59,200
そしてモデリングの目的としては本当に解決すべき課題とか、あとは暗黙のビジネスルールが隠れているっていうことが機能性をがくんと。

33
00:04:00,000 --> 00:04:06,060
落としてしまうので、まずは解決すべき課題とか暗黙のビジネスルールをしっかりと捉えるために。

34
00:04:07,570 --> 00:04:16,990
頭で可視化しながら実際にシステムを利用する方々とディスカッションをして、要件定義のクオリティーを確実に固めていきましょうと、そのため

35
00:04:16,990 --> 00:04:18,640
にモデリングを実行しました。

36
00:04:19,480 --> 00:04:22,480
でモデリングの成果物は3つありましたね。

37
00:04:22,510 --> 00:04:32,530
まずはユースケース分析で、コンテキスト図とかいう巣ケースを分析して、その後2つ目でフローを分析してアクティビティ図とか状態遷移図を作って

38
00:04:32,530 --> 00:04:40,570
最後登場する概念人とかモノとかあと出来事とかルールを整理してドメインモデルとプロジェクト図を作りました。

39
00:04:40,960 --> 00:04:50,110
これらを行うことによって、ビジネス側の人と深くコミュニケーションすることができるので、本当に解決すべき課題はどこにあるのかっていう深掘り

40
00:04:50,110 --> 00:04:52,660
をしたり、あとは言語化されていなかった。

41
00:04:52,660 --> 00:04:56,500
隠れたビジネスルールを掘り起こすということが可能になります。

42
00:04:58,080 --> 00:05:01,080
そしてそれが終わると基本設計に入ります。

43
00:05:01,110 --> 00:05:11,040
基本設計では、エンジニアが設計ドキュメントを作って、ビジネス側のプロジェクトマネージャーがビジネス目線で要件が漏れていないかっていうものを

44
00:05:11,040 --> 00:05:19,710
確認していくので、一言で言うとビジネスとエンジニア間で完成イメージを共通認識として作る。

45
00:05:19,740 --> 00:05:22,800
これが基本設計の目的になってきます。

46
00:05:23,470 --> 00:05:25,570
そして成果物は3つありましたね。

47
00:05:25,600 --> 00:05:35,860
まずは1個目は画面設計、そして2つ目が機能設計、そして3つ目がデータ設計データ設計にはER図とデータフロー図がありました。

48
00:05:36,820 --> 00:05:44,800
で、これらが終わるとどんなシステムが完成するとプロジェクト成功なのかっていうビジネス側とのアグリーがとれてきます。

49
00:05:45,740 --> 00:05:57,200
それが終わると基本設計に入っていきましょうという流れで、モデリングと基本設計で洗い出した情報をコード実装に必要なフォーマットとして落とし込ん

50
00:05:57,200 --> 00:05:58,970
でいくっていう流れです。

51
00:05:59,860 --> 00:06:09,700
なので、最終ゴールとしては詳細設計の一番最後クラス図が完成すること、そして1連の設計ワークの総整理をご紹介しました。

52
00:06:10,180 --> 00:06:21,670
モデリングから基本設計に入って、基本設計の画面設計はフロント実装に行くし、ER図はデータベースの構築に行くし、残りの機能一覧とかデータ

53
00:06:21,670 --> 00:06:31,720
フロー図はロバストネス分析に入って責務で切り分けて適切なクラスを割り当てるし、シーケンス図ではクラスごとに持つべきメソッドを決めるし、

54
00:06:31,720 --> 00:06:34,780
そしてクラス図ではクラス同士の依存関係。

55
00:06:35,730 --> 00:06:39,840
コンポジションとか参照とかインターフェースとかその辺を整理しました。

56
00:06:41,260 --> 00:06:52,330
で何で責務が大事かというと、実装パターンというものは独創的な発想ではなくて、クラスごとの組み合わせクラスの組み合わせパターンで考える

57
00:06:52,330 --> 00:06:53,050
といいんです。

58
00:06:53,440 --> 00:07:04,390
そうすると、責務ごとに適切なクラスが存在するので、名前とパターンを超えてしまえばOKで、大きくは左の管理担当、そして右の処理担当

59
00:07:04,390 --> 00:07:13,930
という風に2つに分けることができて、管理担当にはコントローラーとかサービスがいて、そして処理担当にはFACTORYとかリポジトリ描いてといった

60
00:07:13,930 --> 00:07:14,680
具合です。

61
00:07:15,760 --> 00:07:16,720
そして。

62
00:07:17,430 --> 00:07:23,000
7つ良く使うクラスとして実装パターン責務とクラスの関係性をお伝えしました。

63
00:07:25,050 --> 00:07:29,220
そこから詳細設計の実践ワークで3つやりました。

64
00:07:29,250 --> 00:07:31,440
まず1個目がロバストネス分析。

65
00:07:31,770 --> 00:07:40,980
これはデータフロー図で作ったユースケースのおっきな流れを責務の観点から、どんどんどんどん細分化してきてあげて、その責務を担当するクラス

66
00:07:40,980 --> 00:07:42,690
は何かいうものを考えました。

67
00:07:44,010 --> 00:07:53,610
そして2つ目シーケンス図ではロバスト分析で洗い出したクラスがそれぞれどんなメソッドを持てば責務を全うできるのかというものを洗い出していき

68
00:07:53,610 --> 00:07:54,050
ました。

69
00:07:55,310 --> 00:08:01,710
そして最後クラス図ではエンティティと値オブジェクトを左側ですね。

70
00:08:01,740 --> 00:08:04,430
で、右側がコントローラーとかユースケースですね。

71
00:08:04,430 --> 00:08:17,090
こういう風に2つのクラス図を作ることで、まずはエンティティ値オブジェクトといった登場する概念人物出来事ルールがどんなふうなクラス設計なの

72
00:08:17,090 --> 00:08:17,600
か。

73
00:08:17,600 --> 00:08:23,030
具体的には属性メソッド、そして互いの参照関係を洗い出しました。

74
00:08:23,030 --> 00:08:33,260
そして、右のコントローラーとかユースケースでは、具体的にシステム上でこういうことをやりたいと、そういうニーズを実行するためにどういうクラス

75
00:08:33,260 --> 00:08:34,700
が役割分担しているのか。

76
00:08:35,150 --> 00:08:45,470
まずハンドリングを担うコントローラー、そして処理のまとまりを管理するユースケース、そして具体的に処理を実行担当するFACTORYとかリポジトリクエリー

77
00:08:45,470 --> 00:08:47,150
サービスそういった具合です。

78
00:08:47,300 --> 00:08:54,440
こんなふうにきれいに責務ごとに責務ごとにクラスが分かれているメソッドが分かれているといつ。

79
00:08:54,440 --> 00:08:57,680
誰がソースコードを読んでも変更しやすい。

80
00:08:57,680 --> 00:09:04,310
そして、変更の影響が外に波及しないという保守性の高いソースコードに実装することができます。

81
00:09:05,540 --> 00:09:10,760
以上がこのコースの総まとめになっていきます。

