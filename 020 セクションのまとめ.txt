1
00:00:00,700 --> 00:00:04,930
それでは、最後、詳細設計セクションのまとめに入っていきましょう。

2
00:00:06,190 --> 00:00:13,000
詳細設計の位置付けは、プログラマーに保守性の高いコードを書いてもらうための準備だとお伝えしました。

3
00:00:13,960 --> 00:00:16,660
全体図の中ではここですね。

4
00:00:16,660 --> 00:00:23,170
基本設計から詳細設計に渡すところで情報が劣化してで、その保守性が悪い。

5
00:00:23,200 --> 00:00:28,870
つまり読みにくかったり、修正しにくい構造にならないようにしましょうという実装パターンの当てはめでした。

6
00:00:29,980 --> 00:00:30,820
そして。

7
00:00:31,570 --> 00:00:35,590
扱ったワークでゴールはクラス図の完成ですとお伝えしました。

8
00:00:36,610 --> 00:00:46,450
で、モデリングからここまでの全部の総整理を行うと、モデリングでユースケースとかドメインモデルを作って、そこから基本設計で画面設計機能

9
00:00:46,450 --> 00:00:49,990
設計データ設計という基本基本設計を行いました。

10
00:00:50,710 --> 00:00:57,850
画面設計はWEBフロントの実装に使うし、ER図はデータベースの構築に使うという流れです。

11
00:00:58,150 --> 00:01:03,130
そして、残った情報を詳細設計でロバストネス分析に入れて。

12
00:01:03,870 --> 00:01:14,670
席も細分化して適切なクラスを割り当てていきましょうという実装パターンへの当てはめを行って、そしてシーケンス図を使って各クラスが責務

13
00:01:14,670 --> 00:01:17,640
を実行するために持つべきメソッドを決めました。

14
00:01:18,150 --> 00:01:28,590
最後クラス図に集約して、依存関係などを整理する黒子までが終わって、プログラマーさんに実装が依頼できますねという話でした。

15
00:01:30,400 --> 00:01:36,040
で、ポイントとしては実装パターン責務とクラスを理解しましょうとお伝えしました。

16
00:01:37,100 --> 00:01:46,700
責務ごとに適切なクラスが多数存在するので、あまり独創的に難しく考えず、名前とパターンを覚えてしまえばOKです。

17
00:01:47,030 --> 00:01:53,810
で大きく2つ管理担当と処理担当というクラスがありまして、何度もお見せした図なんですけれども。

18
00:01:54,530 --> 00:02:05,630
コントローラーからサービスに依頼が渡って、そしてスレと作成したいとか、SLACK通知したいっていうサービスがそのサービスの責務を全うするため

19
00:02:05,630 --> 00:02:13,130
にFACTORYとかドメインオブジェクトとかリポジトリーとかに具体的に処理を依頼するという流れでした。

20
00:02:13,130 --> 00:02:22,210
そして、SLACKサービスはAPIクライアントにリクエストを送信したり、そしてSLACKサーバーでエラーが起きてないか例外クラスでチェックしたり

21
00:02:22,210 --> 00:02:23,530
とこういった具合でした。

22
00:02:24,040 --> 00:02:24,910
なので。

23
00:02:25,900 --> 00:02:30,940
一番大事な実装パターンの理解として7つお伝えしましたね。

24
00:02:31,060 --> 00:02:40,060
ドメインオブジェクトとかリポジトリとかクエリーサービスとかなので、よく使うクラスとか背景となる概念を7つ事例を元にご紹介しました。

25
00:02:42,000 --> 00:02:51,780
まとめると、詳細設計とはユースケースを責務に分けて、適切なクラスを割り当てると、そういった2つのプロセスでどんどんどんどん一個一個の

26
00:02:51,780 --> 00:02:56,490
役割分担を行って責務にクラスを当てはめるとそういった具合です。

27
00:02:57,770 --> 00:03:08,540
なので、実装パターンで覚えてしまえばいいので、これから詳細設計をどんどん勉強される場合には、例えばオブジェクト指向プログラミングとかドメイン

28
00:03:08,540 --> 00:03:16,940
駆動設計とかそういったものを勉強してどんな実装パターンがあるのかっていうストックをどんどん溜めていくといいかなと思っています。

29
00:03:18,290 --> 00:03:25,820
ただし、完璧な正解っていうものはないので、最後は現場のルールが最優先になってくるってところを注意しておきましょう。

30
00:03:29,110 --> 00:03:40,180
で現場のルールごとにいろいろと違うとはいえ、同あくまで責務ごとにクラスをきっちりと分けておけば、後から読みやすいし、修正したとき

31
00:03:40,210 --> 00:03:44,830
の影響範囲が小さいよねという保守性が高まることが目的なので。

32
00:03:45,490 --> 00:03:49,270
思考プロセス責務を分けてクラスに当てはめる。

33
00:03:49,300 --> 00:03:53,620
個々のプロセスをしっかりと言い換えすれば、どこにいても応用が効きます。

34
00:03:55,050 --> 00:03:55,800
そして。

35
00:03:56,690 --> 00:04:00,650
3つ成果物を作りましたと、まずロバスト分析ですね。

36
00:04:01,400 --> 00:04:03,890
ちょっと割愛させていただいて。

37
00:04:04,590 --> 00:04:09,900
アクターバウンダリエンティティコントロールっていうこの4つを割り当てていきました。

38
00:04:10,530 --> 00:04:14,580
でデータフロー図をベースにユースケースを実装。

39
00:04:14,580 --> 00:04:19,320
パターンに当てはめながら、具体的なクラスとかメソッドの組み合わせを考えました。

40
00:04:19,860 --> 00:04:24,000
そして、2つ目のシーケンス図ではライフラインですね。

41
00:04:24,000 --> 00:04:26,820
登場するクラスエンティティとかですね。

42
00:04:26,820 --> 00:04:29,610
これを基点に実行しよう。

43
00:04:29,640 --> 00:04:40,740
メソッドが実行中な状態からMESSAGEメソッドの呼び出しが行われて、レスポンスが返ってきてっていうような各クラスが持つメソッドを決めて

44
00:04:40,740 --> 00:04:43,740
いきながら、そのメソッド上の失礼しました。

45
00:04:44,160 --> 00:04:51,350
クラス間の情報連携を時、系列で整理して各クラスが持つべきメソッドの責務を明確にしました。

46
00:04:52,510 --> 00:04:53,440
そして最後。

47
00:04:53,470 --> 00:05:05,200
これらを全部取りまとめたものがクラス図で各クラスが持つべき変数とかメソッドだったり、あとはクラス同士の包含関係依存関係を可視化して

48
00:05:05,200 --> 00:05:06,220
整理しました。

49
00:05:06,640 --> 00:05:09,430
なのでエンティティはこういう風だったし。

50
00:05:10,310 --> 00:05:14,540
コントローラーとかサービスとかの処理担当のクラスはこんなふうでしたと。

51
00:05:15,500 --> 00:05:25,360
なので、ここまでが出そろうときっちりとプログラマーさんに保守性の高いプログラムをコーディングを依頼できますねというお話でした。

52
00:05:26,630 --> 00:05:28,940
以上が設計ワークになっていきます。

53
00:05:29,240 --> 00:05:33,110
次のセクションでは、コース全体のまとめを行っていこうと思います。

