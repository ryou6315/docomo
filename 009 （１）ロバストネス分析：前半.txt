1
00:00:00,680 --> 00:00:04,310
それでは、設計ワーク用のワークシートに移動してきました。

2
00:00:04,939 --> 00:00:16,219
ここではロバストネス分析を行っていこうと思いますので、まずは必要なアクターとあとはバウンダリオブジェクトと。

3
00:00:17,050 --> 00:00:21,340
コントロールオブジェクトとあとはエンティティですね。

4
00:00:21,340 --> 00:00:27,000
これを用意しておこうと思いますで、ちょっとこれ真ん中にあるのはちょっと消しておきますね。

5
00:00:28,660 --> 00:00:29,740
こういった具合です。

6
00:00:29,770 --> 00:00:31,480
で、これらを使って。

7
00:00:32,810 --> 00:00:34,820
データフロー図で洗い出した。

8
00:00:36,290 --> 00:00:41,720
処理に対して細かな責務を割り当てていこうということになっていきます。

9
00:00:41,990 --> 00:00:54,200
なのでちょっとデータフロー図があるといいかもしれないので、ちょっと作成したデータフロー図をスクリーンショットで持ってきましょうか。

10
00:00:58,700 --> 00:00:59,720
これでしたね。

11
00:00:59,720 --> 00:01:01,850
このデータフロー図を。

12
00:01:05,370 --> 00:01:06,990
作っていこうと思うので。

13
00:01:08,180 --> 00:01:09,560
張り付けておきます。

14
00:01:16,910 --> 00:01:26,660
特に難しい考えは特段必要なくて、きちんと責務を分解していくってところを意識していけばいいんじゃないかなと思います。

15
00:01:27,660 --> 00:01:28,470
でですね。

16
00:01:28,500 --> 00:01:29,670
まずは。

17
00:01:31,390 --> 00:01:32,920
このアクターさんが。

18
00:01:35,650 --> 00:01:37,330
スレッド作成画面から。

19
00:01:38,490 --> 00:01:41,850
処理を行っていくので、ちょっと待ってくださいね。

20
00:01:47,650 --> 00:01:55,840
まずスレッド作成画面でスレッド情報を入力するというところを表現するので、アクターさんのプログラマーがいて。

21
00:01:56,700 --> 00:02:04,410
そこにこんなバウンダリーのスレッド作成画面というものを当てはめてあげます。

22
00:02:09,810 --> 00:02:10,770
ここですね。

23
00:02:10,770 --> 00:02:13,800
そしてスレッド作成画面で。

24
00:02:17,780 --> 00:02:18,740
こういうふうに。

25
00:02:21,560 --> 00:02:24,680
線でつないで空けておけば大丈夫です。

26
00:02:24,710 --> 00:02:31,670
ここですねなんてプログラマーさんがまずスレッド作成画面にアクセスすると、そして何らかの入力を行うといった具合です。

27
00:02:31,880 --> 00:02:40,280
そして、スレッド作成画面ではこのバリデーションを行いますねとなっているので、バリデーションが必要ですと。

28
00:02:41,960 --> 00:02:47,110
なので、処理バリデーションの処理を担当するコントロールオブジェクトを。

29
00:02:48,520 --> 00:02:53,980
線でつないであげて、そしてここにはバリデーション処理と書いておきましょう。

30
00:02:56,110 --> 00:02:57,160
こういった具合です。

31
00:03:02,660 --> 00:03:06,350
じゃあ、次は何があるかというと、リクエストが走って存在。

32
00:03:06,350 --> 00:03:08,630
チェックが走って、それと作成があって。

33
00:03:09,580 --> 00:03:10,810
こういった行為ですね。

34
00:03:10,840 --> 00:03:13,930
で、これらの中身の詳細は。

35
00:03:15,460 --> 00:03:17,230
ここでお伝えしてありますね。

36
00:03:17,230 --> 00:03:21,610
コントローラーは入出力を担当してスレッド作成用の。

37
00:03:22,720 --> 00:03:30,810
それと作成プラスSLACK通知の管理コントローラーが必要だし、スレッド情報の管理コントローラーが必要だしといった具合でした。

38
00:03:32,540 --> 00:03:33,320
なのでまあ。

39
00:03:34,070 --> 00:03:38,660
ここに結論は書いてあるんですけれども、手書きで一個一個書いてみましょう。

40
00:03:38,690 --> 00:03:45,110
まずはコントローラーでスレッド作成プラスSLACK通知のコントローラー、そしてスレッド情報の取得コントローラーですね。

41
00:03:46,220 --> 00:04:00,500
そうするとスレッド作成画面とあとはスレッド画面っていうのもプログラマーに関係するので、スレッド作成画面とあとはスレッド画面っていうのもあります

42
00:04:00,500 --> 00:04:01,040
ね。

43
00:04:01,040 --> 00:04:06,530
なので最後スレッド画面がユーザーさんに帰ってきますよと整理しておきます。

44
00:04:07,370 --> 00:04:13,100
そしてじゃあコントローラーが2つ必要でしたねとお伝えしました。

45
00:04:13,130 --> 00:04:25,610
なのでコントローラーとしては、スレッド作成コントローラー、ここにSLACK通知も内包してるんですけども、スレッド作成コントローラーというふうに表記

46
00:04:25,610 --> 00:04:26,570
しておきます。

47
00:04:27,400 --> 00:04:33,340
そしてもう1個がスレット取得用のコントローラーですね。

48
00:04:39,090 --> 00:04:51,660
なのでスレッド画面からスレッド取得コントローラーにそれと情報を取ってきて欲しいよというリクエストが飛ぶし、スレッド作成画面からスレッド作成コントローラー

49
00:04:51,660 --> 00:04:57,960
にじゃ作成してねっていう風にHTTリクエストが飛びますねとそういった具合です。

50
00:04:58,910 --> 00:05:02,360
そして戻ると。

51
00:05:03,110 --> 00:05:09,080
サービス1連処理のまとまりが3つ必要ですねとここで洗い出しています。

52
00:05:09,230 --> 00:05:12,590
スレッド作成SLACK通知それと取得ですね。

53
00:05:12,590 --> 00:05:16,670
この3つのコントローラーサービスが必要になってきます。

54
00:05:17,440 --> 00:05:18,430
なので。

55
00:05:20,160 --> 00:05:28,440
まずはスレット作成サービスというものにリクエストが飛ぶし。

56
00:05:29,330 --> 00:05:35,090
他にはSLACK通知サービスにリクエストが飛ぶしと。

57
00:05:42,290 --> 00:05:44,930
そしてそれだけじゃなくて。

58
00:05:45,640 --> 00:05:49,870
スレット取得用のコントローラーにもスレット取得。

59
00:05:54,140 --> 00:05:57,830
サービスってものが飛びますねと見え具合です。

60
00:06:00,910 --> 00:06:01,690
こうですね。

61
00:06:03,380 --> 00:06:04,250
そして。

62
00:06:05,060 --> 00:06:08,540
なぜ、こんな風に離れて書いているかというと。

63
00:06:09,360 --> 00:06:17,880
スレット取得サービスっていう後にたくさん処理がまとまって書かなきゃいけないんですなのでちょっとですね。

64
00:06:18,180 --> 00:06:19,680
コツとしては。

65
00:06:22,260 --> 00:06:33,870
スレッド作成の1連処理とか、SLACK通知の1連処理っていう風に1連処理っていうものを明示したいので、これはシーケンス図のマストのルール

66
00:06:33,870 --> 00:06:38,190
ではないんですけども、私が書く時は必ず。

67
00:06:39,880 --> 00:06:49,900
こういうふうにサービスごとの責務はここですよというふうに四角で囲って上げて責務範囲を。

68
00:06:50,850 --> 00:06:53,550
しっかりと切ってあげることが多いです。

69
00:06:56,130 --> 00:06:56,640
こうですね。

70
00:06:56,640 --> 00:07:01,980
なのでSLACK通知サービスの1連の処理はここからここですようと。

71
00:07:02,730 --> 00:07:06,930
スレッド作成サービスの1連の処理はここからここまでですよとか。

72
00:07:07,410 --> 00:07:18,690
あとはスレッド通知サービスの1連処理はここからここまでですよっていうふうにサービス単位で責務を主格で切り分けてあげると、後からすごく見やすい

73
00:07:18,690 --> 00:07:19,980
図になっていきます。

74
00:07:20,190 --> 00:07:26,580
ただ、これは私がよくやっているっていうだけであって、マストではないので、参考として覚えておかれてください。

75
00:07:30,340 --> 00:07:32,530
なので、こういった具合ですね。

76
00:07:33,260 --> 00:07:43,940
プログラマーさんがそれと作成画面からスレッドを作って、そしてバリデーションで入力チェックを行った後、スレッド作成コントローラーが何らかリクエスト

77
00:07:43,940 --> 00:07:47,180
を受け取ってそれと作成サービスとそれと通知。

78
00:07:47,450 --> 00:07:54,380
SLACK通知サービスに依頼を来て、この後で何らか処理の固まりが走るとそういった具合ですね。

79
00:07:55,190 --> 00:08:06,200
あとはスレッド作成コントローラーからスレッド画面に飛んでいかなきゃいけないので、このコントローラーのもう1個の責務ないようにちょっとですね。

80
00:08:06,200 --> 00:08:07,400
画面遷移ですね。

81
00:08:07,400 --> 00:08:10,340
スレッドへ遷移っていう責務も足しておきましょうか。

82
00:08:12,870 --> 00:08:13,580
こんな感じですね。

83
00:08:13,590 --> 00:08:24,720
スレッドへ遷移しましょうと、なのでスレッド作成コントローラがスレッドへ遷移しましょうという処理を走らせてスレッド画面にアクセスできますよ

84
00:08:24,720 --> 00:08:26,130
とこういった具合ですね。

85
00:08:26,860 --> 00:08:34,539
まぁ、これだけでも結構情報整理できたんじゃないかなと思うんですけれども、じゃあこのスレッド作成サービスの後にどういう処理が必要か見

86
00:08:34,539 --> 00:08:35,289
ていきましょう。

87
00:08:36,500 --> 00:08:37,340
でですね。

88
00:08:37,340 --> 00:08:38,780
これ以降は。

89
00:08:40,559 --> 00:08:49,410
スライドでご紹介してないので、7個の実装パターンに当てはめながら考えていきましょうという具合になってきています。

90
00:08:50,150 --> 00:08:54,620
なので、7個の実装パターンとしては。

91
00:08:58,530 --> 00:08:59,190
こうですね。

92
00:09:01,040 --> 00:09:03,590
まずコントローラーは今使いました。

93
00:09:03,590 --> 00:09:13,670
そしてサービスも今使いましたとそうすると次ドメインオブジェクトエンティティとか値オブジェクトですねとかあとは。

94
00:09:18,580 --> 00:09:19,840
そうですね。

95
00:09:19,840 --> 00:09:27,070
リポジトリとかクエリーサービスとかあとはFACTORYとかそういったものに当てはめていきましょうとそういった具合になってきます。

96
00:09:28,030 --> 00:09:30,070
なので、まずは。

97
00:09:31,560 --> 00:09:34,290
ドメインオブジェクトを割り当てていきましょう。

98
00:09:34,530 --> 00:09:37,860
そうするとドメインオブジェクトが何かというと。

99
00:09:38,880 --> 00:09:39,750
ここですね。

100
00:09:39,750 --> 00:09:44,520
黄色い枠線で囲ってあるところがドメインオブジェクトですよとスライドで御説明しました。

101
00:09:44,790 --> 00:09:50,910
なので登場するエンティティドメインオブジェクトとエンティティはイコールだと思っていただいて大丈夫です。

102
00:09:51,480 --> 00:10:00,630
社員情報をタスク情報スレッド情報通知先情報という4つが必要なので、エンティティを4つ用意しておいてあげましょう。

103
00:10:00,990 --> 00:10:05,130
で、エンティティはこの丸にした線がくっついたものがエンティティでした。

104
00:10:05,670 --> 00:10:06,960
そうすると。

105
00:10:08,410 --> 00:10:19,900
まず、スレット関連は社員タスク、そしてTHREADっていう3つの情報が必要そうだと見て取れますので、まずは。

106
00:10:25,730 --> 00:10:28,520
社員ですねと、そして。

107
00:10:32,880 --> 00:10:36,390
タスクですねと、そして続いて

108
00:10:39,030 --> 00:10:39,840
スレッド。

109
00:10:40,170 --> 00:10:46,670
この3つがスレッド作成サービスの責務内にいそうですねと見て取れます。

110
00:10:46,950 --> 00:10:50,880
それはこのデータフロー図から洗い出した情報をもとに考えています。

111
00:10:51,060 --> 00:10:57,750
社員情報タスク情報それと情報ってものが、スレッド作成サービスの責務の中にいそうだと見えてきます。

112
00:10:58,170 --> 00:11:05,460
そして、もう1個SLACK通知サービスの責務の中に通知先情報ってのがいそうですね。

113
00:11:05,490 --> 00:11:06,180
なので。

114
00:11:07,190 --> 00:11:10,190
通知先情報をここに置いておいてあげましょう。

115
00:11:17,560 --> 00:11:29,770
そしてここの図には現れてないんですけれども、プログラマーにスレッド画面を返すってことはスレッド取得サービスの責務の中にスレッドオブジェクト

116
00:11:29,890 --> 00:11:32,470
スレッドエンティティがないとおかしいそうなので。

117
00:11:33,690 --> 00:11:39,630
このスレット取得サービスの中にスレッドエンティティを持ってきてあげましょう。

118
00:11:39,660 --> 00:11:40,620
なのでここですね。

119
00:11:40,620 --> 00:11:47,580
スレッドエンティティをコピーして、スレッド取得サービスの責務内に置いておきましょうという考えです。

120
00:11:49,040 --> 00:11:57,590
では、具体的にリポジトリとかファクトリーとか処理を担当するクラスを考えていきましょう。

