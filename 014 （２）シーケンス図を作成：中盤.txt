1
00:00:00,470 --> 00:00:15,540
では、続いてスレッド作成サービスに関するシーケンス図を書いていこうと思いますなので、こちらタイトルをコピーしてスレッド作成サービスに関する

2
00:00:15,540 --> 00:00:17,220
ものを書いていきます。

3
00:00:17,610 --> 00:00:25,320
そして、スレッド作成サービスに関してはこの部分ですね。

4
00:00:27,000 --> 00:00:32,460
なのでちょっとこれだけスクリーンショットを撮っておいて参照できるようにしておこうと思います。

5
00:00:36,540 --> 00:00:38,910
なので、それと作成サービスの方で。

6
00:00:40,410 --> 00:00:41,880
張り付けておきます。

7
00:00:49,490 --> 00:00:50,480
こんな感じですね。

8
00:00:51,840 --> 00:01:06,270
では、スレッド作成サービスにおける登場人物はまずスレッド作成サービスが起点になりまして、ファクトリー2つ、そしてドメインサービスFACTORY2つ

9
00:01:06,270 --> 00:01:07,980
とドメインサービス。

10
00:01:08,250 --> 00:01:14,880
そしてインスタンス生成して上限チェックして保存するっていうふうになっていきますね。

11
00:01:15,360 --> 00:01:26,580
なのでまずはサービスとFACTORYとドメインサービスっていうものが出てきますねとあと、インスタンス生成でタスク情報をデータベースに取ってこ

12
00:01:26,580 --> 00:01:33,360
ないといけないので、区切りタスククエリーサービスも出てくるんじゃないかなと思ったりします。

13
00:01:33,360 --> 00:01:42,900
あとはスレッドに関してはウェブブラウザーから情報を受け取るので、データベースにアクセスする必要はないので、スレッドに関してはクエリーサービスはいら

14
00:01:42,900 --> 00:01:43,800
ないですよねと。

15
00:01:44,590 --> 00:01:53,350
あと上限チェックに関してはファクトリーの中で行うけれども、恐らくこのタスク。

16
00:01:54,100 --> 00:01:57,370
エンティティの中に上限チェックを持たせないといけないですねと。

17
00:01:58,190 --> 00:02:00,140
お話したんじゃないかなと思います。

18
00:02:00,410 --> 00:02:01,790
ちょっと確認してみましょう。

19
00:02:02,830 --> 00:02:05,410
どういったことだったかといいますと。

20
00:02:11,000 --> 00:02:12,440
ここですね。

21
00:02:12,440 --> 00:02:17,780
ビジネスルールに違反したデータを生まないっていうのが大事で、そのためには。

22
00:02:18,960 --> 00:02:30,660
スレットエンティティを作る際には、必ずタスクの方にADDスレットをやって6個目からはエラーになるようにしましょうというふうに制御がある

23
00:02:30,660 --> 00:02:41,760
ので、THREADエンティティをタスクエンティティの変数に持たせるで変数に持たせるためのメソッドがATTHREADっていう話ですね。

24
00:02:42,210 --> 00:02:47,940
で、6個目はリストに追加できずにエラーになるっていう制御になるという話でした。

25
00:02:48,540 --> 00:02:55,380
なので上限チェックっていうのは、このタスクエンティティの責務として実行してあげると良さそうですね。

26
00:02:55,680 --> 00:02:57,060
なので書いていきましょう。

27
00:02:57,870 --> 00:03:00,180
まず、ちょっと必要なレーエンを。

28
00:03:01,140 --> 00:03:04,080
洗い出していきたいのでえとですね。

29
00:03:04,080 --> 00:03:08,310
それと作成ユースケースこれですね。

30
00:03:08,310 --> 00:03:12,750
それと作成サービスをまず下に持ってきまして。

31
00:03:16,690 --> 00:03:24,340
スレッド作成サービスを持ってきまして、あとはタスクファクトリーが必要そうですね。

32
00:03:24,370 --> 00:03:25,000
マス。

33
00:03:26,220 --> 00:03:29,820
なので、タスクファクトリーをここに書いてあげますと。

34
00:03:38,040 --> 00:03:38,460
えですね。

35
00:03:38,460 --> 00:03:41,520
これ何でタスクファクトリーかと言いますと。

36
00:03:44,710 --> 00:03:48,310
ファクトリーの1連処理の中でこうですね。

37
00:03:49,240 --> 00:03:54,580
インスタンス化の処理が煩雑な場合には処理を切り出すっていうふうにあるんですけれども。

38
00:03:55,730 --> 00:04:07,640
スレッド単独で行動できてはまずいというふうにお伝えしたと思うので、タスクの中でスレッドを操作しましょうと考えないといけないので、

39
00:04:07,640 --> 00:04:10,610
このインスタンス化をインスタンス化して。

40
00:04:11,330 --> 00:04:17,540
システム内部で扱えるようにする上で、タスクの単位で考えていく必要がありますよねというお話でした。

41
00:04:18,410 --> 00:04:21,079
なので、このFACTORYに対して。

42
00:04:22,340 --> 00:04:29,120
翼っていう大きなものを作って、大きな翼のインスタンスの中にTHREADインスタンスを持たせましょうという話でした。

43
00:04:29,490 --> 00:04:38,630
そうそうするとTHREADFACTORYではなくて、タスクFACTORYっていう大きな括りで考えた方が責務としては分かる良いんじゃないかなと思い

44
00:04:38,630 --> 00:04:39,290
ます。

45
00:04:40,440 --> 00:04:41,640
そしてですね。

46
00:04:43,160 --> 00:04:49,730
スレッド作成サービスからタスクファクトリーに対してどんな依頼が行くかというと。

47
00:04:53,470 --> 00:04:55,000
まぁシンプルに。

48
00:04:56,450 --> 00:05:00,410
タスクファクトリーにはCREATEでいいんじゃないかなと思います。

49
00:05:00,410 --> 00:05:04,580
クリエイトではなぜかというと。

50
00:05:05,760 --> 00:05:14,880
それと作成サービスにはCREATEANDSEIBUっていうものを依頼しているので、FACTORYがCREATEになってリポジトリがSEIBUを担う

51
00:05:14,910 --> 00:05:19,770
ので、まずFACTORYに対してはCREATEでいいんじゃないかなと思います。

52
00:05:20,630 --> 00:05:27,500
そしてメソッドの実行範囲を明記したいのでまず。

53
00:05:28,460 --> 00:05:29,210
こうですね。

54
00:05:29,240 --> 00:05:32,420
CREATEのところからスタートして。

55
00:05:36,260 --> 00:05:38,030
タスクファクトリーに対しても。

56
00:05:42,090 --> 00:05:43,500
このように書いてあげましょう。

57
00:05:43,890 --> 00:05:45,300
そして。

58
00:05:47,390 --> 00:05:52,930
まあ、今の時点でどこまで続くかわからないので、一応下の方まで伸ばしておきましょうですね。

59
00:05:52,930 --> 00:05:56,890
タスクファクトリーの方も少し下の方まで伸ばしておきましょう。

60
00:05:58,230 --> 00:06:03,420
そして続いてタスクファクトリーは存在。

61
00:06:03,420 --> 00:06:10,900
チェック用のドメインサービスで社員と翼の存在チェックをしますとその後インスタンス生成して上限チェック。

62
00:06:10,920 --> 00:06:17,580
なので、翼と社員の存在チェックドメインサービスが必要だろうと見えてきます。

63
00:06:18,450 --> 00:06:25,770
なので、次に依頼を投げるべきはタスクのドメインサービスと。

64
00:06:27,220 --> 00:06:29,800
社員のドメインサービスに。

65
00:06:32,110 --> 00:06:35,140
メソッド実行しないといけないですよねと見えてきます。

66
00:06:36,010 --> 00:06:37,150
こういった具合ですね。

67
00:06:40,740 --> 00:06:41,810
なので。

68
00:06:51,390 --> 00:06:53,910
タスクのドメインサービスと。

69
00:07:00,120 --> 00:07:03,900
そしてSIGNのドメインサービスがありまして。

70
00:07:04,550 --> 00:07:23,640
で、タスクファクトリーからタスクドメインサービスにタスクはいますかっていうものを問い合わせるとイズエグゼイグジスト、そしてタスクIDでこれは存在

71
00:07:23,670 --> 00:07:25,650
しますかってものを問い合わせます。

72
00:07:25,650 --> 00:07:29,460
でまぁ、戻り値としてはTRUEかFALSEでしょうというふうになっています。

73
00:07:29,940 --> 00:07:38,760
でISEXITISイグジストってやったら戻り値は絶対TRUEかFALSEなので、そういう予想がつくものは戻り値書かなくても全然大丈夫です。

74
00:07:40,020 --> 00:07:42,480
そして続いて。

75
00:07:43,950 --> 00:07:49,140
社員のドメインサービスに対してもISイグジストで。

76
00:07:50,740 --> 00:07:52,900
スタッフIDとなっていくでしょう。

77
00:07:55,290 --> 00:08:04,140
そうするとタスクドメインサービスの責任範囲はここまでなので、メソッドの実行範囲もここで区切っておけばいいんじゃないでしょうか。

78
00:08:04,140 --> 00:08:05,040
こんな風ですね。

79
00:08:05,640 --> 00:08:10,200
そして社員ドメインサービスのメソッド実行範囲も。

80
00:08:12,180 --> 00:08:15,990
この狭い範囲ですねと絞っておきましょう。

81
00:08:19,150 --> 00:08:28,150
で、これでまあエラーが起きたら何らかエラー処理を別途書かなきゃいけないんですけど、一旦は成功したものとして進めていこうと思います。

82
00:08:28,870 --> 00:08:34,000
で続いてなんですけれども、存在チェックが終わったら。

83
00:08:34,940 --> 00:08:38,030
インスタンス生成が必要ですねとじゃ。

84
00:08:38,030 --> 00:08:39,559
インスタンス生成は。

85
00:08:40,620 --> 00:08:45,840
スレッドに関しては、ウェブブラウザーから情報を受け取るので文字情報は持ってますとじゃ。

86
00:08:45,840 --> 00:08:49,500
タスクはタスクIDしか持っていないので。

87
00:08:50,900 --> 00:08:57,610
タスクに関する文に関しては、データベースから情報を取ってくるので、タスククエリーサービスが必要ですねとなってきます。

88
00:08:58,010 --> 00:09:00,830
なので、まず、簡単なスレッドの方から書いていきましょう。

89
00:09:02,760 --> 00:09:06,930
まずスレッドの方を考えていくと。

90
00:09:09,820 --> 00:09:11,740
このスレッドを持っていきましょう。

91
00:09:23,580 --> 00:09:25,230
ここのスレットで。

92
00:09:27,750 --> 00:09:28,590
そしてですね。

93
00:09:28,860 --> 00:09:32,100
これ勝ち方のコツなんですけれども。

94
00:09:34,200 --> 00:09:47,820
エンティティを新しくインスタンス化するときは、このインスタンス化するタイミングの高さに入れておくといいので、ここにスレッドっていう風に書い

95
00:09:47,820 --> 00:09:55,830
ておいてで、このスレッドエンティティーはタスクファクトリーから。

96
00:09:58,120 --> 00:09:59,650
クリエイトされた。

97
00:10:00,010 --> 00:10:05,950
ここで生成されますよと明記しておくのが、あとから分かりやすくするポイントになっていきます。

98
00:10:06,190 --> 00:10:06,940
でですね。

99
00:10:07,240 --> 00:10:18,640
インスタンス化する際には、CREATEと書いて、そしてTHREADイコールYOUTHREADっていう風に書いておくと。

100
00:10:19,450 --> 00:10:25,450
よいしょこのタイミングでTHREADインスタンスを作るよと明記できるので、結構わかりやすいです。

101
00:10:29,010 --> 00:10:30,420
そして。

102
00:10:32,550 --> 00:10:35,730
スレッドがここで登場しましたよと。

103
00:10:37,040 --> 00:10:38,390
いう風になっていきます。

104
00:10:45,920 --> 00:10:51,890
なので、これでタスクファクトリーの中にスレッドエンティティーを保持することができました。

105
00:10:52,310 --> 00:10:58,310
特に難しいことはないので、もうそれとエンティティをここでインスタンス化しましたよというそれだけです。

106
00:10:58,850 --> 00:11:00,980
そうすると続いて。

107
00:11:03,470 --> 00:11:07,280
タスクのエンティティを作らないといけないのでデータベースから。

108
00:11:08,290 --> 00:11:14,920
情報を取ってくるためにタスククエリーサービスが必要ですねと実装パターンでお伝えしました。

109
00:11:15,340 --> 00:11:17,620
どこだったかというと、このページですね。

110
00:11:17,950 --> 00:11:23,080
データベースからクエリーサービスでサービスクラスに情報を取ってきますよという話です。

111
00:11:25,370 --> 00:11:29,060
なので、ここで必要なものとしては。

112
00:11:31,710 --> 00:11:35,910
このスレッドの後にタスククエリーサービス。

113
00:11:38,700 --> 00:11:44,100
を持ってきて、データベースから情報を取ってきましょうといった具合です。

114
00:11:46,710 --> 00:11:51,450
なので、ここのタスクファクトリーから。

115
00:11:57,620 --> 00:12:00,380
タスククエリーサービスに対して。

116
00:12:04,170 --> 00:12:07,980
情報を取りに行きましょうというふうにまず明記していきます。

117
00:12:10,680 --> 00:12:23,970
そうすると、タスクをデータベースに問い合わせるために必要な情報は何かというと、もう既にタスクIDがあるので、まあFINDERの場合、

118
00:12:24,330 --> 00:12:31,920
IDで引数としてタスクIDっていうものがあれば10分。

119
00:12:32,550 --> 00:12:33,300
それと。

120
00:12:34,500 --> 00:12:35,130
失礼しました。

121
00:12:35,130 --> 00:12:38,820
十分メソッドとしての責務を果たせるんじゃないでしょうか。

122
00:12:39,740 --> 00:12:46,370
なので、タスクファクトリーからTHREADバイIDっていうメソッドを呼び出してタスククエリーサービスに。

123
00:12:48,370 --> 00:12:52,120
タスクを読んできてくださいっていうふうに依頼を流します。

124
00:12:52,450 --> 00:12:55,450
で、この依頼を受けて。

125
00:12:58,490 --> 00:13:02,570
タスクエンティティを生成しますよというお話ですなので。

126
00:13:03,400 --> 00:13:09,550
タスククエリーサービスがBINDバイIDの依頼を受けて。

127
00:13:12,860 --> 00:13:15,410
そしてここのタイミングで。

128
00:13:18,730 --> 00:13:22,630
タスクインスタンスが生成されますねという話でした。

129
00:13:23,680 --> 00:13:28,150
あとは、このメソッドの実行範囲をここにちゃんと修正しておきましょう。

130
00:13:28,450 --> 00:13:29,260
ここですね。

131
00:13:33,000 --> 00:13:34,350
そして。

132
00:13:37,030 --> 00:13:40,990
タスクインスタンスを生成するので。

133
00:13:41,720 --> 00:13:43,610
ここでやるべき処理は。

134
00:13:47,640 --> 00:13:48,810
ちょっと待ってください。

135
00:13:48,840 --> 00:13:50,820
近すぎたので話しますね。

136
00:13:51,750 --> 00:13:54,510
タスクがあってこちらで。

137
00:13:55,820 --> 00:14:03,470
で、CREATEでタスクイコールYOUのタスクとこういった具合ですね。

138
00:14:03,980 --> 00:14:12,950
なのでここにリクエストを投げてあげてってタスクがインスタンス化できましたよとこういった具合です。

139
00:14:21,520 --> 00:14:23,050
そうすると。

140
00:14:25,140 --> 00:14:31,380
タスクファクトリーにタスクインスタンスを保持することができましたとなります。

141
00:14:31,590 --> 00:14:33,060
じゃあ、続いて。

142
00:14:34,570 --> 00:14:43,690
このインスタンス生成の責務が終わったので、ではタスクファクトリー内でスレッドは5個までですよっていう上限チェックが必要ですねとなってくる

143
00:14:43,690 --> 00:14:46,510
ので、じゃあどうチェックするかというと。

144
00:14:48,850 --> 00:14:50,110
ADDTHREAD。

145
00:14:51,020 --> 00:14:56,290
2スレッドを渡してあげて、6個目以上じゃないかってのをチェックしましょうというお話です。

146
00:14:56,300 --> 00:14:57,770
そうするとですね。

147
00:15:02,310 --> 00:15:05,970
タスクファクトリーの責務の中から。

148
00:15:10,090 --> 00:15:11,080
佐。

149
00:15:12,940 --> 00:15:15,610
のエンティティに新しく。

150
00:15:17,280 --> 00:15:30,990
メソッドを実行することができて、タスクドットatスレッド、そしてスレッドIDをここに渡してあげましょうという流れですね。

151
00:15:33,760 --> 00:15:35,440
で、そしてですね。

152
00:15:35,440 --> 00:15:48,340
これうまくいけばまあ無事にめでたしめでたしになってくるんですけれども、これがじゃ6個目だったらどうなりますかっていうエラーハンドリングのお話

153
00:15:48,340 --> 00:15:52,390
もここで考えておく必要があったりしますでですね。

154
00:15:52,390 --> 00:15:55,300
ここで登場してくる結合フラグメントが。

155
00:15:56,160 --> 00:15:59,310
1個ありまして、先程お見せした。

156
00:16:00,070 --> 00:16:01,360
表でいくと。

157
00:16:02,540 --> 00:16:03,100
ここですね。

158
00:16:03,110 --> 00:16:07,700
条件分岐ALTERNATIVEの結合フラグメントを作っていきましょう。

159
00:16:08,210 --> 00:16:09,560
そうすると。

160
00:16:14,950 --> 00:16:18,340
結合フラグメントは関連する。

161
00:16:20,310 --> 00:16:24,240
ライフラインを全部こうやってくくりまして。

162
00:16:25,490 --> 00:16:27,140
でちょっと下に伸ばしておきますね。

163
00:16:27,140 --> 00:16:27,770
こうやって。

164
00:16:38,230 --> 00:16:43,870
でこの関連するライフライン全体にのばしておきまして。

165
00:16:47,250 --> 00:16:47,360
拍手。

166
00:16:48,420 --> 00:17:00,720
そして条件分岐を描きたいので、まず何をもって条件分岐とするのかっていう条件を描きますで今回だと。

167
00:17:03,380 --> 00:17:13,880
スレッド数が条件分岐の鍵になってくるので、スレッド数が5個だったらまぁエラーになってほしいですよと。

168
00:17:15,640 --> 00:17:21,310
っていう条件分岐があるので、それ以外は成功ですねと風になっていきます。

169
00:17:21,819 --> 00:17:22,690
なので。

170
00:17:23,849 --> 00:17:25,470
スレッド数が。

171
00:17:28,390 --> 00:17:33,190
5以下だったら成功ですねと言う風になっていきますじゃ。

172
00:17:33,190 --> 00:17:40,210
これを条件分岐であらわしていきましょうという感じですねで、この2つの条件分岐を。

173
00:17:41,020 --> 00:17:43,000
点線で割ってあけて。

174
00:17:46,720 --> 00:17:47,260
ここですね。

175
00:17:47,260 --> 00:17:49,000
点線で終わってあげて。

176
00:17:50,020 --> 00:17:52,420
成功パターンはこう。

177
00:17:52,450 --> 00:17:58,540
失敗パターンはこうみたいに領域を分けてあげると非常にわかりやすいです。

178
00:17:59,490 --> 00:18:00,180
ここですね。

179
00:18:00,540 --> 00:18:02,820
そして色をつけておいてあげましょう。

180
00:18:06,990 --> 00:18:08,040
こういった具合です。

181
00:18:09,260 --> 00:18:20,570
そうするとじゃああとスレッドでスレッドIDが5個以上だった場合はエラーにならなければいけないので、単純に失敗。

182
00:18:20,600 --> 00:18:26,030
通知を介してあげましょうとなるので、この点線を使います。

183
00:18:29,580 --> 00:18:35,580
なので高校から佑エンティティーから失敗通知を

184
00:18:40,920 --> 00:18:44,460
渡してあげるとで佑ファクトリーが失敗。

185
00:18:44,460 --> 00:18:47,310
通知を受け取ってそのままそれと作成サービスに失敗。

186
00:18:47,340 --> 00:18:57,000
通知を送り返してあげるので、まあ特段難しいことは考えず、もうそのまま横に伸ばしてあげて、何も加工することなくそのまま。

187
00:18:58,310 --> 00:19:02,690
それと作成サービスに失敗通知を返しますよという風に考えます。

188
00:19:03,170 --> 00:19:04,700
そして。

189
00:19:07,530 --> 00:19:08,940
続いて。

190
00:19:14,660 --> 00:19:18,920
成功した場合にはどうなるでしょうと考えるので。

191
00:19:20,280 --> 00:19:33,180
成功した場合には特段何も問題なくまあうまくいきましたよーってとこで正常処理としてタスクエンティティがそのまま帰ってくればいいんじゃない

192
00:19:33,180 --> 00:19:34,230
かなと思います。

193
00:19:34,260 --> 00:19:40,200
なのでタスクエンティティが何事もなく、無事に帰ってきましたということですね。

194
00:19:42,640 --> 00:19:44,770
こういったふうに表現すれば大丈夫です。

195
00:19:46,240 --> 00:19:47,200
そしてですね。

196
00:19:47,200 --> 00:19:51,070
ここまでがようやくタスクファクトリーの責務なんですね。

197
00:19:51,490 --> 00:20:01,630
で、タスクファクトリーの責務が終わった後はタスクリポジトリの責務にパスするので、スレッド作成サービスからじゃ保存しましょうとタスクすリポジトリー

198
00:20:01,630 --> 00:20:04,160
に依頼が飛ぶという流れですする。

199
00:20:04,240 --> 00:20:05,260
そうするとですね。

200
00:20:06,890 --> 00:20:10,430
ようやく最後にタスクリポジトリーが登場してきますと。

201
00:20:16,740 --> 00:20:18,930
ここをコピーしてあげて。

202
00:20:20,230 --> 00:20:23,110
最後に翼リポジトリーを表現してあげましょう。

203
00:20:30,090 --> 00:20:38,400
そうすると、タスクリポジトリーの責務範囲としては一番下の方になってくるので、ここに対して。

204
00:20:44,770 --> 00:20:48,580
この成功パターンの最後の処理として。

205
00:20:50,670 --> 00:20:55,200
ここからタスクリポジトリーに向かって。

206
00:21:01,040 --> 00:21:06,050
西武、そして翼というふうな具合ですね。

207
00:21:07,170 --> 00:21:08,160
なので。

208
00:21:09,600 --> 00:21:22,140
タスクにTHREADを足してあげて、そしてスレッド数が5以下で成功したら、タスクエンティティからタスクを受け取って、そしてそれを。

209
00:21:23,420 --> 00:21:26,000
セーブしてあげましょうという話ですね。

210
00:21:26,030 --> 00:21:34,370
でセーブしてあげて、タスクリポジトリーが受け取ってで、無事にこのそれと作成サービスの責務完了という具合になります。

211
00:21:34,820 --> 00:21:37,490
なので俯瞰するとこういった具合ですね。

212
00:21:38,000 --> 00:21:47,600
まあ、なのでスレッド作成するだけでも結構いろんな責務があったと思うんですけれども、これだけ綺麗に責務で分割してあげると、どこをどう

213
00:21:47,630 --> 00:21:52,100
変更すればいいのか明らかにわかってくるので、保守性の観点から非常にいい。

214
00:21:52,940 --> 00:21:55,700
責務の分割になったんじゃないかなと思います。

215
00:21:56,490 --> 00:22:04,770
では、続いて最後SLACK通知のところを扱って、このシーケンス図の枠終わりにしようと思います。

