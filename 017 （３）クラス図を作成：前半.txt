1
00:00:00,600 --> 00:00:02,710
では、実戦ワークに入っていきましょう。

2
00:00:03,060 --> 00:00:14,010
お伝えした3つの手順の通り、まずはドメインモデルを使ってエンティティと値オブジェクトに関する図を作っていきたいので、あとはこちらをスクリーン

3
00:00:14,010 --> 00:00:18,480
ショットとてで、ドメインモデル用のワークシートに張り付けておきましょう。

4
00:00:19,880 --> 00:00:20,630
ここですね。

5
00:00:22,370 --> 00:00:27,200
こういうふうにしておけば、いつでも参照できるので後から便利です。

6
00:00:28,670 --> 00:00:31,010
そしてクラス図用の。

7
00:00:33,360 --> 00:00:37,110
箱を持ってきて、ちょっと色づけして分かりやすくしておきましょうか。

8
00:00:37,590 --> 00:00:38,880
こういった具合ですね。

9
00:00:39,620 --> 00:00:40,190
そうし。

10
00:00:43,600 --> 00:00:44,110
手。

11
00:00:45,010 --> 00:00:48,310
まあ、このくらいあればいいんじゃないでしょうか。

12
00:00:49,210 --> 00:00:52,690
まあ基本になるものとしてこういう風に。

13
00:00:54,430 --> 00:01:02,350
一緒に基準になるものをつくっておこうと思いますで、ここに上段に属性を書いて下段に。

14
00:01:03,220 --> 00:01:06,760
メソッド名を書いて、そしてこれらを。

15
00:01:08,620 --> 00:01:11,590
線でつないでいこうという流れになっていきます。

16
00:01:12,130 --> 00:01:24,490
なので、もうここまで決めた内容を粛々と当てはめていくだけではあるので、そこまで新しいことを考える必要はないかなと思いますで手順で

17
00:01:24,490 --> 00:01:27,700
お伝えしたとおり、まずはドメインモデルから。

18
00:01:28,520 --> 00:01:33,830
エンティティと値オブジェクトを考えましょうという感じなので、まずはですね。

19
00:01:33,830 --> 00:01:41,900
プロジェクトタスクマイルストーンセット社員といったように登場するものをまずはひたすら。

20
00:01:43,060 --> 00:01:45,130
書き表していきましょう。

21
00:01:45,580 --> 00:01:49,570
ちょっとこれ小さくしまして、まずはプロジェクトですね。

22
00:01:50,530 --> 00:01:57,730
プロジェクトがあるし、社員があるし、こういう風にしてまずは名前を書いていきます。

23
00:01:59,280 --> 00:02:01,080
マイルストーンがあるし。

24
00:02:02,250 --> 00:02:03,600
翼がある使徒。

25
00:02:07,140 --> 00:02:08,310
そして。

26
00:02:11,820 --> 00:02:22,260
スレッドがあって返信があって、そして返信には記録管理と通知先が必要ですねというお話でした。

27
00:02:26,750 --> 00:02:28,360
通知先と。

28
00:02:29,720 --> 00:02:34,160
記録管理が必要ですねと。

29
00:02:34,920 --> 00:02:38,280
じゃ、まずプロジェクトをやっていきましょう。

30
00:02:39,000 --> 00:02:43,350
でプロジェクトに置いて必要なものとしては。

31
00:02:44,450 --> 00:02:45,320
まずは。

32
00:02:46,260 --> 00:02:59,370
プロジェクトは当然プロジェクトIDが必要ですねと、そしてこれはオブジェクト指向プログラミングの実際のコード記述の方法になってくるんで、ご説明

33
00:02:59,370 --> 00:03:07,290
は省くんですけれども、基本的に属性は全部こういうふうにマイナス。

34
00:03:07,320 --> 00:03:08,310
つまり。

35
00:03:09,100 --> 00:03:11,470
ご説明した内容でいくと。

36
00:03:13,610 --> 00:03:14,480
ここですね。

37
00:03:17,020 --> 00:03:24,370
自分のクラスの内からのみ参照できるっていうふうにしておくのが、大体のセオリーになってきます。

38
00:03:24,460 --> 00:03:31,570
そしてメソッドはパブリックにしておくという組み合わせが大体の場合で多いです。

39
00:03:33,840 --> 00:03:40,230
なので、属性はマイナスにしておいて、外はプラスにしておくというのが大体のセオリーです。

40
00:03:40,650 --> 00:03:44,730
そしてプロジェクト名開始日完了日なので。

41
00:03:46,150 --> 00:03:47,980
STARTDATE。

42
00:03:48,610 --> 00:03:57,880
そしてENDTODATEこれ形を書いてもいいんですけれども、今回も。

43
00:03:59,850 --> 00:04:00,270
ここですね。

44
00:04:00,270 --> 00:04:02,100
わいわいわいわいエムエム。

45
00:04:02,470 --> 00:04:08,160
DDTに書いてもいいんですけど、もうわかってることが多いので省略しようと思います。

46
00:04:08,520 --> 00:04:18,899
先ほどお伝えしたとおり、プロジェクトがマイルストを内包するとか、そういう外部のクラスを内包するときに明記しておこうかなと思います。

47
00:04:20,769 --> 00:04:21,640
そしてですね。

48
00:04:21,640 --> 00:04:35,200
プロジェクトっていうのはオブジェクト数を見ると、マイルストーンを内包してる必要があるし、そしてタスクを内包してるし、社員を内包している

49
00:04:35,200 --> 00:04:37,480
よねっていう風に考えることができます。

50
00:04:37,840 --> 00:04:38,770
そしてですね。

51
00:04:38,770 --> 00:04:45,220
ここで1個考えるべき論点が実装パターンの。

52
00:04:46,190 --> 00:04:47,840
3つ目にありました。

53
00:04:47,840 --> 00:04:51,620
それが塩役っていうふうになっていますでですね。

54
00:04:51,620 --> 00:05:02,720
タスクとスレッドのように強い関係性があるものは、集約っていう風に考えてでプロジェクトとマイルストーンのように一緒に削除しないと論理

55
00:05:02,720 --> 00:05:10,340
的に整合性が崩れるよねぐらいもっと強い関係性をコンポジションっていう風に呼ぶと御説明しました。

56
00:05:10,730 --> 00:05:11,690
なのでこうですね。

57
00:05:12,170 --> 00:05:17,480
タスクとスレッドは集約だし、プロジェクトとMILESTONEはコンポジションだしっていう話ですね。

58
00:05:17,990 --> 00:05:21,860
なので整合性が必要になるような関係性は集約。

59
00:05:21,860 --> 00:05:25,760
それ以外のもっと強いやつはコンポジションっていうお話でした。

60
00:05:26,270 --> 00:05:27,950
そうするとですね。

61
00:05:28,840 --> 00:05:37,390
まずプロジェクトとマイルストーンはコンポジションの関係にあるので、プロジェクトがマイルストーンを内包してないといけないんです。

62
00:05:38,210 --> 00:05:39,680
そうすると。

63
00:05:40,990 --> 00:05:47,140
例えば、マイルSTONESといった感じでリスト形式で。

64
00:05:49,970 --> 00:05:53,420
こんなふうにマイルストーンのエンティティを。

65
00:05:54,760 --> 00:05:56,680
内包してあげようって感じですね。

66
00:05:56,830 --> 00:06:00,100
具体的にはインスタンスをリストで持たせてあげます。

67
00:06:01,450 --> 00:06:03,070
そしてですね。

68
00:06:03,070 --> 00:06:06,190
他に関係性があるものはというと。

69
00:06:07,620 --> 00:06:10,620
プロジェクトとタスクプロジェクトと社員ですね。

70
00:06:10,980 --> 00:06:20,640
じゃあプロジェクトと社員はどうかというと、プロジェクトが削除されたからといって、社員がクビになったり辞めたりするわけではないので、

71
00:06:21,030 --> 00:06:24,660
コンポジションほど強くはなさそうですねと考えられます。

72
00:06:24,900 --> 00:06:33,720
じゃあ、集約な場合はどうするかというと、集約の場合はIDを参照させましょうとお伝えしたので、ここに。

73
00:06:35,670 --> 00:06:38,010
社員に関しては。

74
00:06:38,870 --> 00:06:43,820
スタッフ図、そしてリストでスタッフIDを持たせてあげましょうと。

75
00:06:45,160 --> 00:06:46,060
これ具合ですね。

76
00:06:47,130 --> 00:06:51,870
そして同様にタスクに関してもプロジェクト。

77
00:06:52,830 --> 00:06:58,980
がなくなったときに、じゃあ翼はどうかっていうふうに考えていくと。

78
00:07:00,240 --> 00:07:09,120
今回考えている範囲では、プロジェクトがなくなったらタスクもなくなるんじゃないかというとこでインスタンスを参照させればいいんじゃないかな

79
00:07:09,120 --> 00:07:10,470
という風に考えます。

80
00:07:11,070 --> 00:07:22,560
ただ、実際の現場ではもっと細かくこの集約なのかコンポジションなのか考えるケースもあるので、もしかしたらプロジェクトとタスクの関係性で

81
00:07:22,560 --> 00:07:30,360
もこれちょっとコンポジションにすると色々不具合あるからID参照にしておいた方がいいんじゃないかみたいなのも実際あります。

82
00:07:30,630 --> 00:07:39,660
ただ、まあその原則的な考え方としては、プロジェクトがなくなったらタスクもなくなるんで、インスタンス参照させておきましょうというセオリーに沿っ

83
00:07:39,660 --> 00:07:41,280
て書いておこうと思います。

84
00:07:41,790 --> 00:07:46,560
もちろん、その原則に沿わないやり方をあえてする時もあるっていうのだけ。

85
00:07:46,560 --> 00:07:48,570
事前に断っておこうと思います。

86
00:07:50,600 --> 00:07:52,400
なので、翼渦。

87
00:07:53,630 --> 00:08:00,470
そしてここに翼のインスタンスを持たせましょうという話ですね。

88
00:08:01,550 --> 00:08:08,090
そうするとプロジェクトに対してマイルストーンとかスタッフとかタスクを。

89
00:08:09,030 --> 00:08:17,370
追加するためのメソッドが必要になってくるので、ここで3つATATMILESTONE、そして

90
00:08:20,120 --> 00:08:23,750
ATタスクそして。

91
00:08:25,830 --> 00:08:32,520
あとスタッフというものが必要ですねとという風に見えてきました。

92
00:08:32,520 --> 00:08:33,600
こういったかわいいですね。

93
00:08:34,200 --> 00:08:47,100
こんな風にして、まずはドメインモデルに書いてある変数の情報を属性に持たせてあげて、その後他のクラスを内包する関係があれば、それ

94
00:08:47,100 --> 00:08:51,540
も足してあげると、そういった具合に書いていけばOKです。

95
00:08:55,130 --> 00:08:57,520
では続きもさくさくと作っていきましょう。

96
00:08:58,060 --> 00:09:03,490
次はプロジェクトに紐づくマイルストーンを扱ってみようと思います。

97
00:09:03,850 --> 00:09:20,200
マイルストーンはマイルストーン名開始日終了日なので、特に難しいことはなさそうなので、まずマイルストーンIDとあとはNAME。

98
00:09:21,880 --> 00:09:23,760
続いてCB。

99
00:09:26,850 --> 00:09:29,760
そして終了日があればいいんじゃないでしょうか。

100
00:09:31,900 --> 00:09:45,280
そしてじゃあマイルストーンが他を参照しているかというと、翼を持ってそうですねとわかりますで、先程プロジェクトがなくなると翼はなくなり

101
00:09:45,310 --> 00:09:48,220
ますよねというふうに整理したと思うんですけども。

102
00:09:48,340 --> 00:09:58,510
別にマイルストーンがなくなっても翼ごとなくなる必要はないので、ここは翼IDとしてマイルストーンに持たせればいいんじゃないかなと思います。

103
00:09:59,280 --> 00:10:00,870
なので、ここに。

104
00:10:04,750 --> 00:10:05,830
翼頭の。

105
00:10:07,330 --> 00:10:12,100
リストでタスクIDという具合です。

106
00:10:12,580 --> 00:10:14,410
でもうあれですね。

107
00:10:14,410 --> 00:10:25,090
プロジェクトがタスクIDもタスクを持ってし、マイルストーンもタスクIDを持っているとなんかタスク参照されすぎだろうという議論もあったり

108
00:10:25,090 --> 00:10:37,750
すると思うので、ここはもう原則として関係するクラスにタスクタスクIDを持たせましょうと説明しましたが、プロジェクト内の判断ですね。

109
00:10:37,750 --> 00:10:45,880
現場の開発チームの判断としても、マイルストーンだけにタスクIDを持たせればよくないかみたいな。

110
00:10:46,060 --> 00:10:53,860
つまりはプロジェクトの方にはタスク情報いらなくないみたいなことももちろんあるので、そこは現場の判断に従っていきましょう。

111
00:10:55,110 --> 00:10:55,920
そして。

112
00:10:57,430 --> 00:11:04,920
タスクを追加するためのメソッドが必要なので、ADDタスクといった具合ですね。

113
00:11:04,930 --> 00:11:08,950
残りのメソッドはおそらくいらないので、こういうふうにしておきましょう。

114
00:11:09,840 --> 00:11:15,000
そしてこんなふうにしてマイルストーンを作ることができました。

115
00:11:18,670 --> 00:11:23,470
では、続いてタスクを扱っていきましょう。

116
00:11:24,310 --> 00:11:26,950
タスクについては。

117
00:11:27,720 --> 00:11:35,490
タスク名詳細ステータスドキュメントURLあとは。

118
00:11:36,430 --> 00:11:41,050
社員情報とスレットも持ってそうですね。

119
00:11:41,780 --> 00:11:43,060
なので。

120
00:11:44,170 --> 00:11:47,260
123467個あればよさそうですね。

121
00:11:47,260 --> 00:11:48,310
ちょっとお待ちください。

122
00:11:52,160 --> 00:11:55,250
まず翼。

123
00:11:57,270 --> 00:12:04,890
IDを持っていて、そしてタイトル、そして出ている。

124
00:12:05,250 --> 00:12:15,630
そしてステータスを持っていて、そしてドキュメントURLを持っていて、そして。

125
00:12:17,950 --> 00:12:31,210
まあ、スタッフIDを持ちたいので、タスクに関するスタッフIDと考えると、まぁアサインどスタッフっていう風にも書いておけば、まあスタッフと

126
00:12:31,210 --> 00:12:32,800
整合性はあるんじゃないでしょうか。

127
00:12:33,430 --> 00:12:42,670
そしてスレッドを持ちたいので、それで頭でこれはリストのスレッドでいいんじゃないでしょうか。

128
00:12:43,510 --> 00:12:49,780
これスレッドIDにしなかったのは、もうタスクが削除されたらスレッドごと削除されないとなんですかね。

129
00:12:49,780 --> 00:12:58,150
関連するタスクがないスレッドが浮いちゃうので、これはコンポジションだと考えて、スレッドを同時削除するという意思のもと、スレッドインスタンス

130
00:12:58,150 --> 00:13:00,460
を渡してあげましょうとそう言った具合です。

131
00:13:01,260 --> 00:13:10,170
でタスクが持つべきメソッドは、まずはスタッフのアサインとあとはアサインというのはタスクの割り当てです。

132
00:13:10,200 --> 00:13:24,300
なのでタスクの割り当てとあとスレッドの追加ですねなので、アサインスタッフが必要だし、あとはAT。

133
00:13:25,740 --> 00:13:31,680
スレッドが必要だし、あとはステータスが未着手。

134
00:13:31,680 --> 00:13:42,270
作業中レビュー依頼中みたいにタスクのステータスを変えれないといけないので、チェンジステータスみたいなものがあるとよさそうです。

135
00:13:42,840 --> 00:13:44,310
まあ、このぐらいですかね。

136
00:13:46,310 --> 00:13:47,090
そしてですね。

137
00:13:47,090 --> 00:13:49,850
ここで1個知っておくといいのが。

138
00:13:50,720 --> 00:13:53,210
1個論点ありまして。

139
00:13:54,250 --> 00:13:57,940
実装パターンの7個目、補助的な。

140
00:13:58,750 --> 00:14:02,170
クラスってのに列挙型メリットってあったと思います。

141
00:14:02,230 --> 00:14:10,840
これはステータスみたいな選択肢の候補を整理するときに使うんですけれども、どう使うかと言いますと。

142
00:14:14,550 --> 00:14:15,220
と言えばですね。

143
00:14:15,300 --> 00:14:30,390
タスクのステータスの存在候補を書くので、明レートと書いて翼ステータスといったように書いてあげると良いです。

144
00:14:31,360 --> 00:14:32,560
でですね。

145
00:14:32,560 --> 00:14:34,120
ちょっとお待ちください。

146
00:14:34,480 --> 00:14:37,810
こんな風にして大きくしてあげて。

147
00:14:39,690 --> 00:14:45,060
タスクのステータス候補が何個あったかというと。

148
00:14:46,920 --> 00:14:49,020
状態遷移図を見れば分かります。

149
00:14:49,020 --> 00:14:53,550
そうすると未着手作業中レビュー依頼中レビュー中完了。

150
00:14:53,550 --> 00:14:59,670
この5個ですねなので、12345個あれば良さそうです。

151
00:15:01,170 --> 00:15:03,510
で未着手。

152
00:15:04,800 --> 00:15:14,220
そして作業中レビュー依頼中、そしてレビュー中。

153
00:15:16,100 --> 00:15:26,480
そして完了というふうにタスクのステータスを管理するための命令とクラスというのがあるといいので、ここに書いておきますと。

154
00:15:28,840 --> 00:15:34,030
あとは続いてはSHINEを着手していきましょうか。

155
00:15:34,060 --> 00:15:36,070
社員に関しては。

156
00:15:36,920 --> 00:15:40,190
まず氏名、メールパスワード役割。

157
00:15:40,880 --> 00:15:45,500
あとはIDなので、まずは変数が5つ必要ですねと。

158
00:15:46,830 --> 00:15:56,670
なので、まずはスタッフID、そしてネームでいいメールとパスワードですね。

159
00:15:56,970 --> 00:15:58,650
良いメールと。

160
00:16:01,390 --> 00:16:07,840
パスワードがあって、最後に役職のポジションがありますねと。

161
00:16:09,220 --> 00:16:22,480
そして社員が何らか持つべき他のクラスがあるんじゃないかといくと、社員に通知先っていうものが必要ですねと考えられます。

162
00:16:22,510 --> 00:16:38,530
なので個々の通知先情報というものが、例えばSLACK通知とかあとはLINEに通知とか、そういう風に社員がどのような連絡手段を持っている

163
00:16:38,530 --> 00:16:41,230
のかっていうのを表現してあげるといいんじゃないでしょうか。

164
00:16:42,390 --> 00:16:47,550
なので、ここのポジションの下に。

165
00:16:51,490 --> 00:16:55,810
ノーティスツールズみたいな感じに書いておけばいいんじゃないでしょうか。

166
00:16:55,810 --> 00:17:03,220
そうするとリストでノーティスインフォメーションを持たせてあげるとそんな感じですね。

167
00:17:04,359 --> 00:17:18,460
で社員の属性に持たせるべきものはなので、まずはこのの手数ツールズを与えてあげる必要があるので、後のDISツールってのが必要ですね

168
00:17:18,460 --> 00:17:18,730
と。

169
00:17:19,470 --> 00:17:20,730
あとは。

170
00:17:23,319 --> 00:17:26,319
他にもいろいろとありそうですねぇ。

171
00:17:27,470 --> 00:17:36,260
例えば、パスワードを変えるとかポジションを変えるとかそういったものも必要ですねと名前を変えるとかいえ、メールを変えるとかも。

172
00:17:36,290 --> 00:17:45,260
当然全部必要なんですけど、特筆すべきはパスワードを変えたりとか、あとポジションを変えるとか、その辺は重要そうなので、一応書いておき

173
00:17:45,260 --> 00:17:45,770
ましょう。

174
00:17:46,130 --> 00:17:46,790
なので。

175
00:17:47,890 --> 00:17:50,350
間セットパスワードと。

176
00:17:51,340 --> 00:17:52,780
あとは。

177
00:17:54,370 --> 00:17:55,450
チェンジ。

178
00:17:57,290 --> 00:18:00,230
ポジションとかそういった具合ですね。

179
00:18:01,510 --> 00:18:01,780
じゃ。

180
00:18:01,780 --> 00:18:05,260
これで終わりかというと、もうちょっと見てみましょうか。

181
00:18:06,310 --> 00:18:08,500
そうすると社員は。

182
00:18:09,690 --> 00:18:23,550
このスレッドと返信に紐づいていて社員がスレッドを作るし、社員が返信するっていう風に考えると、社員エンティティの振る舞いメソッドには。

183
00:18:26,270 --> 00:18:39,470
スレッドを作るCREATEスレッドが必要じゃないかってのが見えてきますしじゃスレッドに対して返信するのでREPLYっていうソフトがないと、

184
00:18:39,500 --> 00:18:52,160
この社員エンティティの振る舞い社員エンティティがシステム内でどういう役割を果たすかって考えると、社員エンティティっていう人がこのシステム内部で

185
00:18:52,460 --> 00:19:02,360
スレッドをクリエートするし、スレッドに対して返信REPLYするしっていう風にこの社員エンティティ人がどういう振る舞いを行うのかっていうのをメソッド

186
00:19:02,390 --> 00:19:03,470
で表現します。

187
00:19:03,500 --> 00:19:08,480
なのでCREATETHREADREPLYもここに書くべきだと判断しました。

188
00:19:09,610 --> 00:19:21,070
もちろん、ここに書かずにドメインサービスに書いたり、はたまたまったく別のクラスとしてスレッドをCREATEするためだけの別クラスを作るっていう

189
00:19:21,070 --> 00:19:22,360
設計もありです。

190
00:19:22,490 --> 00:19:27,280
それはもう本当に現場の判断になってくるんで、どこに責務を持たせるかっていう。

191
00:19:27,280 --> 00:19:31,720
ただ、それだけの判断なので、あまり難しいことを考えなくて大丈夫です。

192
00:19:31,960 --> 00:19:36,220
私はTHREADをクリエイトするっていう責務を社員に持たせようと考えた。

193
00:19:36,220 --> 00:19:38,050
それだけの話になっていきます。

194
00:19:39,110 --> 00:19:40,850
では続きをやっていきましょう。

195
00:19:41,330 --> 00:19:47,030
あとは通知先返信スレッド帰属管理という風になってきますね。

196
00:19:48,090 --> 00:19:49,650
そしてですね。

197
00:19:49,650 --> 00:19:51,810
この4つに入りたいんですけど。

198
00:19:53,050 --> 00:19:53,950
実はですね。

199
00:19:53,980 --> 00:19:57,040
1個追加でいい論点があるんです。

200
00:19:57,190 --> 00:19:59,230
それが値。

201
00:19:59,260 --> 00:20:01,060
オブジェクトですね。

202
00:20:01,330 --> 00:20:11,080
値オブジェクトに関するルールでPASSWORDっていう値を僕ジェクトを持たせましょうとかいいメールに関する値オブジェクトを持たせましょうといった

203
00:20:11,080 --> 00:20:23,020
具合に、何らかのチェックルールを何らかのチェックルールを値オブジェクトの中に実装することができるので、例えばパスワードの半角英数字8から16文字

204
00:20:23,020 --> 00:20:34,720
といったものは値オブジェクトとして独立させることでがちっとルールをチェックさせることができるんですなので、ここに本当は名前とかいい。

205
00:20:34,720 --> 00:20:42,640
メールとか全部値オブジェクトにしたいんですけど、代表としてパスワードを値オブジェクトにしておきましょう。

206
00:20:43,420 --> 00:20:49,780
で値オブジェクトの特徴として値と言ってるだけあって値しか持たないです。

207
00:20:49,780 --> 00:20:50,950
属性だけです。

208
00:20:51,620 --> 00:20:56,540
そしてPASSWORDっていう風になっていきますと。

209
00:20:57,460 --> 00:21:09,760
なので特段難しい論点ではないんですけども、このパスワード社員が持つパスワード属性は別のパスワードっていう値オブジェクトが持ってますよという

210
00:21:09,760 --> 00:21:10,570
話です。

211
00:21:10,750 --> 00:21:21,970
でそうすると、ここはSTRINGじゃなくて、パスワードクラスとして別の形定義のクラスがありますよと名を明記するために、ここにパスワード

212
00:21:21,970 --> 00:21:23,350
クラスがありますよと。

213
00:21:24,380 --> 00:21:27,350
明記してあげましたっていう風に書いていきます。

214
00:21:27,380 --> 00:21:29,450
これが値オブジェクトの使い方です。

215
00:21:30,810 --> 00:21:32,790
というわけて続き、やっていきましょう。

216
00:21:33,800 --> 00:21:43,430
サインができたので、次通知先スレッド返信奇特管理ですねなので、まあ続きは。

217
00:21:44,500 --> 00:21:48,520
通知先を扱ってあげると楽かなと思います。

218
00:21:48,640 --> 00:21:53,260
通知先は、ツールとアカウント情報あとはIDなので。

219
00:21:54,480 --> 00:22:05,010
まあのティスIDとあとはツールNAME、そしてトークンとかですかね。

220
00:22:06,620 --> 00:22:09,110
ぐらいがあればいいんじゃないでしょうか。

221
00:22:10,710 --> 00:22:16,590
今のところメソッドの必要性は無さそうなので、このぐらいで書いておこうと思います。

222
00:22:19,960 --> 00:22:28,750
そして変身とすれどと記録管理がつながってくるんじゃないでしょうか。

223
00:22:29,190 --> 00:22:41,620
そうすると、スレッドはどうかと考えると、THREADはタスクと社員と返信に関わるけど、スレッドはタスクと返信に持たれてますね。

224
00:22:41,650 --> 00:22:42,520
まず指定しました。

225
00:22:42,520 --> 00:22:46,000
スレッドはタスクと社員に内包されてます。

226
00:22:47,970 --> 00:22:49,080
あ失礼しました。

227
00:22:49,110 --> 00:22:51,000
タスクだけに内包されてますね。

228
00:22:51,000 --> 00:22:53,280
それとはタスクに内包されています。

229
00:22:54,230 --> 00:23:00,350
そしてスレッドの作成権限を社員に持たせてます。

230
00:23:00,380 --> 00:23:01,730
こういった関係性でしたね。

231
00:23:03,070 --> 00:23:04,360
そしてですね。

232
00:23:04,360 --> 00:23:04,940
じゃあ。

233
00:23:04,960 --> 00:23:05,440
あ。

234
00:23:07,140 --> 00:23:17,070
スレッドは返信というものを中に持たなきゃいけないんじゃないかなと思いますで、特にスレッド自体がなくなると返信は当然一緒に消えなきゃ

235
00:23:17,070 --> 00:23:24,330
おかしいので、コンポジションの関係にありますねとなのでインスタンス参照する必要があると分かってきました。

236
00:23:24,930 --> 00:23:27,210
なので先にここに。

237
00:23:30,290 --> 00:23:38,150
リプライズっていう形でリストでリプライを持ってますねという具合です。

238
00:23:39,980 --> 00:23:42,050
そしてですね。

239
00:23:44,480 --> 00:23:45,500
あと忘れ。

240
00:23:45,500 --> 00:23:59,600
あとは作成日時作成者、宛先タイトル本文フラグというものを持っていればいいし、返信は日時投稿者宛先本文記録完了は日時フラグとすると

241
00:23:59,600 --> 00:24:02,360
返信クラス。

242
00:24:03,320 --> 00:24:09,470
に対して帰属管理LEADマネージですねを持ってないといけなさそうですね。

243
00:24:09,470 --> 00:24:18,950
例えば、返信が削除されたら当然記録管理が削除されないとおかしいので、返信の中に記録があるだろうと考えると。

244
00:24:22,450 --> 00:24:29,290
ここの中にLEADマネージっていうのがあって。

245
00:24:32,360 --> 00:24:34,430
そしてその中に。

246
00:24:36,340 --> 00:24:37,150
こんな感じですね。

247
00:24:37,630 --> 00:24:44,320
帰属管理を持ってますよと、そういうふうに整理することができますとでこうですね。

248
00:24:46,500 --> 00:24:48,450
で記録管理がつながっていきます。

249
00:24:48,930 --> 00:24:51,150
じゃあ、ちょっとこれ中身書いていきましょうか。

250
00:24:51,300 --> 00:24:59,160
もう論点は整理が終わったので、もうドメインモデルに出てきている変数の情報をババッと入れるだけです。

251
00:24:59,640 --> 00:25:09,810
で、あとはスレッドの解決フラグとかもあるので、解決フラグのオンオフを切り替えろとか、その程度のメソッドだけ検討すれば良いでしょうと。

252
00:25:10,810 --> 00:25:11,680
なので。

253
00:25:11,710 --> 00:25:17,050
まずスレッドに関してはちょっと多めに用意しておきましょうか。

254
00:25:17,050 --> 00:25:17,920
こんな具合で。

255
00:25:21,670 --> 00:25:28,960
で、まずはスレットIDがあればよくて、そして作成日時ですね。

256
00:25:31,220 --> 00:25:40,160
作成日時があればよくて、そして誰が作ったのかっていうCREATEスタッフのIDを持っていればいいじゃないでしょうかね。

257
00:25:40,610 --> 00:25:56,420
そしてノッツというまあ、誰に宛てたものかという話と、そしてタイトルと本文のコーディーとあとは解決したかというisソルブド。

258
00:25:57,850 --> 00:26:07,660
というものが必要を出すし、後は変身後内部で持っている必要があるので、リプライズが最後にあるとまあこのぐらいですね。

259
00:26:07,780 --> 00:26:12,910
じゃあスレッドが持つべきメソッドはまずADDREPLYですね。

260
00:26:15,670 --> 00:26:23,560
そしてあとはこれ以上はループだってあるんで、解決フラグを立てるためのループ。

261
00:26:24,900 --> 00:26:27,990
というものもあるといいんじゃないでしょうか。

262
00:26:30,400 --> 00:26:32,200
ここはいいが入らないですね。

263
00:26:32,530 --> 00:26:33,340
ここですね。

264
00:26:33,670 --> 00:26:37,480
残りはもう入らないでしょうと、こういう風にして考えていきます。

265
00:26:39,420 --> 00:26:49,590
で最後変身と記録管理は変身はリプライIDがあればいいし、あとは。

266
00:26:51,600 --> 00:26:53,830
日時投稿者宛先本文ですね。

267
00:26:53,930 --> 00:26:56,370
後は未読管理なので。

268
00:27:03,880 --> 00:27:10,240
DATEタイムとあとクリエとスタッフID、そして誰に向けたものか。

269
00:27:14,160 --> 00:27:17,700
そして最後本部のボディーがあればいいと。

270
00:27:21,440 --> 00:27:31,550
でこの記録管理を持っているので、この返信が読まれたかどうかという記録管理の記録フラグですね。

271
00:27:31,550 --> 00:27:35,060
この記録フラグのオンオフを返信。

272
00:27:35,060 --> 00:27:47,450
エンティティが持たなきゃいけないはずなので、ここで返信読まれたよっていうふうに変えなきゃいけないので、マークASリードとかあればいいん

273
00:27:47,450 --> 00:27:48,080
じゃないですかね。

274
00:27:49,220 --> 00:27:54,290
マークASリードぐらいのメソッドがあればいいんじゃないでしょうか。

275
00:27:56,010 --> 00:27:58,290
そして最後記録管理は。

276
00:27:59,460 --> 00:28:02,460
まずはリードマネージ。

277
00:28:02,490 --> 00:28:15,840
IDとあと読まれた日付日時なのでDATETIME最後リードFLAGISLEADの方がいいかもしれないですね。

278
00:28:15,870 --> 00:28:16,950
ISLEAD。

279
00:28:18,300 --> 00:28:22,170
あとはメソッドは特にいらなそうなので、こんな具合ですと。

280
00:28:25,560 --> 00:28:34,560
こんなふうにして、まずはドメインモデルを使って必要なエンティティと値オブジェクトの一覧を作ることができました。

281
00:28:34,890 --> 00:28:36,690
でこれを最後。

282
00:28:37,850 --> 00:28:46,820
関係性、例えば集約なのかコンポジションなのかとか、そういった依存性とか関係性を整理していきます。

