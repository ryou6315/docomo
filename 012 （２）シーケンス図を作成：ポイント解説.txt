1
00:00:00,580 --> 00:00:06,670
それでは、ここからは詳細ワークの詳細設計ワークの2つ目シーケンス図に入っていこうと思います。

2
00:00:07,720 --> 00:00:13,360
シーケンス図の成果物イメージとしては、クラス同士のやりとり処理と流れですね。

3
00:00:13,360 --> 00:00:19,540
これらを時系列で整理して一個一個のクラスに必要なメソッドを決めていくという風になっています。

4
00:00:19,570 --> 00:00:32,590
なので、ここにプログラムというアクターがあったり、それと作成画面とかあとはコントローラーユースケースといった具合にクラスを上に配置して、

5
00:00:32,590 --> 00:00:40,510
そして例えばセーブTHREADとかCREATEANDセーブとか具体的なメソッドの呼び出しを定義していこうという具合になってきます。

6
00:00:41,950 --> 00:00:50,860
シーケンス図を描くための基本ルールとしては、まずこのバウンダリーとかコントロールロバスト分析で登場してきた。

7
00:00:50,860 --> 00:00:58,990
これらが登場するクラスとしてライフラインと呼ばれていますで、このバウンダリーがちょっとですね。

8
00:00:59,200 --> 00:01:09,880
解釈が微妙なんですけれども、スレット作成画面はCLASSなのかっていうお話はあるんですけど、JAVAで使われているSPRINGフレームワーク

9
00:01:09,880 --> 00:01:10,540
ですかね。

10
00:01:10,760 --> 00:01:22,150
あのーSERVLETとかJSPとかそういったものは画面をクラスのように使うことができるので、このバウンダリーオブジェクトもクラスとして表現される

11
00:01:22,150 --> 00:01:32,560
ことがあるんですけども、通常は画面は画面なので、あまりクラスとして解釈しないっていうのも一つ理解としてあるんじゃないかなと思います。

12
00:01:32,740 --> 00:01:36,370
まあ、とりあえずライフラインで登場するクラスと覚えておけば大丈夫です。

13
00:01:37,080 --> 00:01:53,070
そして2つ目が個々の白い縦棒のことを実行仕様と呼んでまして、このたとえばスレッド作成コントローラーの白棒はスレッド作成コントローラーに内包

14
00:01:53,070 --> 00:01:58,260
されているメソッドがこの分だけ実行中ですよという風になっています。

15
00:01:58,530 --> 00:02:04,050
そして、そのメソッドの実行の中でメッセージ外の呼び出しですね。

16
00:02:04,080 --> 00:02:13,140
なのでこのスレッド作成コントローラーがスレッド作成ユースケースの何らかのメソッドを呼んでますよっていうものがこのメッセージです。

17
00:02:13,530 --> 00:02:14,760
そして最後。

18
00:02:16,000 --> 00:02:22,690
メソッド呼び出しのレスポンスを点線で右から左に書いてあげるといった具合です。

19
00:02:23,410 --> 00:02:35,110
でまとめると、各クラスが持つメソッド名が決まればOKというふうにここでは考えればよくてなんでかというと、具体的なソースコードの具体

20
00:02:35,110 --> 00:02:39,100
的な中身っていうのはもちろん、これコーディングのタイミングで考えるので。

21
00:02:39,970 --> 00:02:40,870
ここでは。

22
00:02:41,920 --> 00:02:51,640
各クラスがどのクラスに対して何のメソッドメソッドを呼ぶのかっていうクラスの責務、そしてメソッドの責務という風に考えていくのが、ここの

23
00:02:51,670 --> 00:02:52,960
ポイントになってきます。

24
00:02:52,990 --> 00:02:59,350
なのでクラスやメソッドが担当する責務が見える命名を意識すれば十分です。

25
00:02:59,860 --> 00:03:00,640
そして。

26
00:03:01,520 --> 00:03:05,090
ここでもう1個複合フラグメントっていうものがありまして。

27
00:03:06,710 --> 00:03:08,270
これは何かというと。

28
00:03:09,250 --> 00:03:12,460
条件分岐プログラミングで良いIfですね。

29
00:03:12,490 --> 00:03:18,100
Ifの条件分岐とかあとFOR文で使うループ処理などを表現することが可能になっていきます。

30
00:03:18,860 --> 00:03:21,410
図で表すとここですね。

31
00:03:21,920 --> 00:03:29,390
ここではレフって書いてあるんですけれども、何らかの条件分岐とかループ処理を行うときにこういう表現を使います。

32
00:03:29,660 --> 00:03:39,920
で、今使っているレフっていうのは別のシーケンス図を参照しましょうとかあとこれオルトはIF文の条件分岐だし、LOOPはFOR文の

33
00:03:39,920 --> 00:03:46,490
繰り返し処理後、ブレークは処理の中断みたいなことを表わしておりまして、結構いろいろあるので。

34
00:03:47,500 --> 00:03:49,630
ここに書いてない処理ルールを記述。

35
00:03:49,630 --> 00:03:58,300
ルールを使いたいなと思ったら、シーケンス図複合フラグエレメント複合フラグメントっていう風に検索していただくと、だいたい78パターンぐらい出

36
00:03:58,300 --> 00:04:01,540
てくるので、どれかを使えばいいんじゃないかなと思います。

37
00:04:03,770 --> 00:04:14,060
じゃあ、シーケンス図の構造がわかったところで、具体的にどう書くのかと言いますと、まずクラスとクラスがあったとしますとで、この

38
00:04:14,060 --> 00:04:28,820
クラスとクラスの間の関わり、振る舞いを定義するのがシーケンス図で、まず例えばクラスがどこかからメソッドを実行されてでクラスのメソッド

39
00:04:29,180 --> 00:04:42,410
を呼び出して、そしてじゃメソッドから戻り値が返ってきて、そして次メソッドを呼び出して引数としてHOGEを渡してあげてで、また戻り値

40
00:04:42,410 --> 00:04:52,160
が返ってきて、最後クラスの中で最終処理を加えて戻り値をまたどこかに返すっていう風な書き方になっています。

41
00:04:52,550 --> 00:05:04,940
なので特段難しいルールはなくて、クラスがどこかからリクエストをもらって、次のクラスのメソッドを呼び出して戻り値を受け取って、そしてまた

42
00:05:04,940 --> 00:05:08,300
別のクラスに戻していくっていう風な流れになっています。

43
00:05:09,750 --> 00:05:10,020
じゃ。

44
00:05:10,020 --> 00:05:19,680
これらのシーケンス図を作ると、何が嬉しいかというと、シーケンス図の作成を通じて一個一個のクラスがどんなメソッドを持つべきなのかっていう

45
00:05:19,680 --> 00:05:20,820
ものが見えてきます。

46
00:05:21,090 --> 00:05:30,450
なのでクラスも何らかの責務を持つ子クラスが持つ責務をメソッドで役割分担するってことなのですね。

47
00:05:30,480 --> 00:05:38,910
なのでクラスが持つべき責務に対して、それをまた細分化して一個一個の責務をメソッドメソッドで割り当てるといった具合です。

48
00:05:40,080 --> 00:05:49,720
なので、それと作成したいよっていうユースケースに対して、まずは責務ごとにクラスで分解するっていうのが、1個前のロバスト分析の成果物

49
00:05:49,720 --> 00:05:50,140
でした。

50
00:05:50,470 --> 00:06:00,910
そして、最近のことのクラスに対して、それをまた細分化して責務ごとのメソッドを決めましょうっていうのが、シーケンス図の主な着眼点に

51
00:06:00,910 --> 00:06:01,840
なってきます。

52
00:06:02,380 --> 00:06:11,590
なのでクラスはもう既にロバスト分析で登場しているので、クラスの責務を満たすためのメソッドを更に細分化してあげましょうという流れになっ

53
00:06:11,590 --> 00:06:15,550
ていきますというわけで、実践ワークに入っていきましょう。

