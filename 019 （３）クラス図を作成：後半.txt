1
00:00:00,840 --> 00:00:08,730
では、続いてコントローラーとかサービスのクラス図の作成に入っていきますで参照。

2
00:00:08,760 --> 00:00:12,630
先としては、このシーケンス図を参照していきます。

3
00:00:13,330 --> 00:00:24,010
まあ、細かい論点はもう洗い出し終わっているので、ひたすらシーケンス図をクラス図に落とし込んでいくだけっていう簡単なお話になっておりますで

4
00:00:24,010 --> 00:00:24,880
ですね。

5
00:00:25,120 --> 00:00:33,190
まあ、もうスレッド作成画面というのは画面なので、クラスではないので、スレッド作成コントローラーとかスレッド作成サービスSLACK通知サービス、

6
00:00:33,190 --> 00:00:46,090
そしてその中に含まれているファクトリー、そしてドメインサービスクエリーサービスという風にひたすら書いていくって言うだけなので、あまり細かい論点

7
00:00:46,090 --> 00:00:58,000
はないですで、例えば気をつけるものは、このイグジストっていうメソッドは、こっちのタスククエリーサービスが持っているので、いずれイグジストを

8
00:00:58,000 --> 00:00:59,260
タスクあ失礼しました。

9
00:00:59,260 --> 00:01:08,290
タスクドメインサービスのメソッドとして持たせてあげればなけなければいけない上げなければいけないので、その図の読み解き方だけ忘れないように

10
00:01:08,290 --> 00:01:10,540
していけばバッチリ大丈夫です。

11
00:01:10,930 --> 00:01:11,660
でですね。

12
00:01:11,680 --> 00:01:12,670
作っていきましょう。

13
00:01:13,440 --> 00:01:17,400
なので、こちらからコピーしてあげて。

14
00:01:19,990 --> 00:01:22,210
ここに書いていこうと思います。

15
00:01:22,630 --> 00:01:27,010
そんなに個数は必要ないので、ちょっとですね。

16
00:01:27,520 --> 00:01:28,810
3個ずつぐらい。

17
00:01:29,560 --> 00:01:33,010
書いておけば十分じゃないかなと思います。

18
00:01:33,280 --> 00:01:35,830
一応、ちょっと枠として書いておきましょう。

19
00:01:39,290 --> 00:01:40,790
こんな感じですね。

20
00:01:48,140 --> 00:01:49,730
そしてですね。

21
00:01:50,240 --> 00:01:55,430
まずは起点となるものは登録受け付けの。

22
00:01:57,700 --> 00:02:02,470
コントローラーですよという風になってきますんで、こういう風に書いておきましょう。

23
00:02:03,520 --> 00:02:04,150
でですね。

24
00:02:04,780 --> 00:02:09,400
システム全部について書くとちょっとキリがなくなってしまうので。

25
00:02:10,289 --> 00:02:12,390
ここのスレッド作成画面。

26
00:02:13,290 --> 00:02:14,520
で洗い出した。

27
00:02:14,520 --> 00:02:18,750
この画面上に写っているこの範囲だけ書いていこうと思います。

28
00:02:18,900 --> 00:02:31,020
なので作成コントローラーサービスサービスで、このリファレンス先のスレート作成サービスSLACK通知サービスっていうさっき書いた3つのシーケンス図に関して

29
00:02:31,020 --> 00:02:32,610
クラス図を描いていきましょう。

30
00:02:33,090 --> 00:02:36,780
なので、まずはコントローラーとサービス2つですね。

31
00:02:37,260 --> 00:02:42,540
登録受け付け、コントローラーがあって、そしてスレッド作成サービスがあって。

32
00:02:47,020 --> 00:02:52,510
そしてSLACK通知サービスがありましてと言う話ですね。

33
00:03:00,130 --> 00:03:02,020
そしてじゃあ。

34
00:03:04,400 --> 00:03:14,750
コントローラーが持つべき属性とメソッドは何かというと、コントローラーはセーブスレッドを呼び出されたり。

35
00:03:15,670 --> 00:03:17,860
しますねとそのくらいですかね。

36
00:03:17,860 --> 00:03:18,640
あとは。

37
00:03:19,830 --> 00:03:26,490
リダイレクトの機能も必要ですねとそのくらいですかね。

38
00:03:27,090 --> 00:03:28,170
なので。

39
00:03:30,470 --> 00:03:34,070
コントローラーに関しては属性は不要で。

40
00:03:37,160 --> 00:03:39,350
西部THREADっていう。

41
00:03:40,290 --> 00:03:51,360
メソッドと、あとはリダイレクトというスレッドっていうページ遷移のメソッドがあれば十分ではないでしょうか。

42
00:03:52,520 --> 00:03:58,520
そしてスレッド作成サービスとSLACK通知サービスに関しては。

43
00:04:00,610 --> 00:04:07,540
CREATEANDセーブのメソッドを実行されるだけですねなので。

44
00:04:09,540 --> 00:04:23,280
まずはメソッドとしてはCREATEANDSEIBUの1個だけですよとあとは持つべき属性がありますかというと、ここには表現されていないん

45
00:04:23,280 --> 00:04:28,770
ですけれども、実装パターンを思い出していただくと。

46
00:04:30,990 --> 00:04:33,300
スレッド作成サービスって。

47
00:04:33,990 --> 00:04:36,780
最後セーブ依頼を投げてるんですよね。

48
00:04:38,170 --> 00:04:50,740
スレッド作成サービスは、タスクリポジトリに対してセーブメソッドを実行してるんですで、リポジトリを実装実行する際には1個注意点があったの

49
00:04:50,740 --> 00:04:52,210
を覚えてますでしょうか。

50
00:04:52,240 --> 00:04:55,510
DEPENDENCYインジェクションっていうのがあるんですけれども。

51
00:04:56,330 --> 00:05:00,170
ここですね依存オブジェクト注入っていう論点がありました。

52
00:05:00,650 --> 00:05:04,640
で依存オブジェクト注入が何だったかというと。

53
00:05:05,850 --> 00:05:09,540
リポジトリを使用するクラスは。

54
00:05:11,600 --> 00:05:12,950
引数で。

55
00:05:14,360 --> 00:05:14,450
拍手。

56
00:05:15,100 --> 00:05:17,950
情報を受け取ってくださいねと。

57
00:05:18,910 --> 00:05:20,140
いいお話がありました。

58
00:05:20,140 --> 00:05:22,210
ちょっと画面乱れてすいません。

59
00:05:22,240 --> 00:05:30,220
画面をちょっとこちらコード実装を大きくしてあげるとこんな感じですね。

60
00:05:30,220 --> 00:05:31,750
すいません画面乱れました。

61
00:05:33,130 --> 00:05:38,890
スレッド作成サービスがリポジトリ経由で情報を保存するためには。

62
00:05:40,400 --> 00:05:50,720
引数としてリポジトリを受け取って、そしてインスタンス変数、つまり属性としてリポジトリーを持っておかないと。

63
00:05:52,450 --> 00:05:59,080
サービスクラスとリポジトリの依存性が強まってしまいますとご説明をお伝えしました。

64
00:05:59,380 --> 00:06:01,960
もし、ちょっと理解を忘れてしまった際には。

65
00:06:02,990 --> 00:06:08,750
詳細設計の解説のよく使う実装パターン7000を3回されてください。

66
00:06:09,740 --> 00:06:19,820
なので、スレット作成サービスっていうのは属性としてタスク用のリポジトリーを持ってなきゃいけないですよねと。

67
00:06:23,250 --> 00:06:28,020
そういうふうに考えることが実装パターンから出て来ました。

68
00:06:28,680 --> 00:06:32,040
そして続いてSLACK通知サービスですね。

69
00:06:32,040 --> 00:06:33,900
SLACK通知サービスは。

70
00:06:35,020 --> 00:06:43,540
まずはNOTIFYっていうメソッドが実行されますねとなので、持つべきメソッドはNOTIFYメソッドだけですとシンプルですね。

71
00:06:43,690 --> 00:06:52,390
そしてSLACKが持つべき属性は何かあるかというと、シーケンス数を見ると。

72
00:06:53,200 --> 00:07:04,990
SLACK通知サービスが通知先取得用のクエリーサービスを使いますねとで、クエリーサービスも先ほどと同様なんですけれども。

73
00:07:06,270 --> 00:07:09,900
リポジトリとクエリーサービスは同じようなものとお伝えしました。

74
00:07:09,930 --> 00:07:11,640
リポジトリーとクエリーサービス。

75
00:07:12,060 --> 00:07:15,780
そしてそれぞれの共通目的としては。

76
00:07:17,450 --> 00:07:21,030
インフラ技術への依存を1カ所にまとめるというお話でした。

77
00:07:21,380 --> 00:07:26,320
なので、リポジトリとクエリーサービスは同じようなものだと考えられるんです。

78
00:07:26,570 --> 00:07:32,870
そうするとDEPENDENCY、インジェクションってリポジトリーだけじゃなくて、クエリサービスにも当てはまるんです。

79
00:07:33,230 --> 00:07:34,880
そう考えると。

80
00:07:36,580 --> 00:07:47,440
タスクリポジトリーおそれと作成サービスに持たせたのと同じように、SLACK通知のクエリーサービスもここに持たせなきゃいけないですよねと

81
00:07:47,440 --> 00:07:48,400
分かってきます。

82
00:07:48,820 --> 00:07:52,570
なので何かしらのクエリ

83
00:07:54,820 --> 00:07:59,410
サービスがまずありまして、じゃあ何のクエリーサービスかというと。

84
00:08:00,390 --> 00:08:07,470
通知先取得のクエリーサービスですねとなので、NOTIFYクエリーサービスでまあいいんじゃないでしょうか。

85
00:08:07,500 --> 00:08:15,690
もうちょっと厳密な名前を考えたいところなんですけど、あまり時間をそこでかけても仕方がないので、NOTIFYクエリーサービスっていうものを

86
00:08:15,690 --> 00:08:17,340
変数として持って。

87
00:08:19,010 --> 00:08:25,250
そしてこののてリファインメソッドの中でNOTIFYメソッドの中で。

88
00:08:26,030 --> 00:08:35,929
クエリーサービスを実行して、通知先のエンティティをインスタンス化して通知先情報を持ってきて、そしてSLACKAPIクライアントに実行依頼を

89
00:08:35,929 --> 00:08:37,940
投げますよとそういった具合ですね。

90
00:08:39,710 --> 00:08:44,179
というわけで、まずはコントローラーと。

91
00:08:44,950 --> 00:08:48,460
サービス2つのクラス図ができました。

92
00:08:49,880 --> 00:08:59,030
では、続いてスレッド作成サービスとSLACK通知サービスの下にどういうものが必要か扱っていきましょう。

93
00:08:59,540 --> 00:09:05,120
特段難しくないんですけれども、スレッド作成サービスの下側には。

94
00:09:05,920 --> 00:09:10,870
佑ファクトリー伊藤佑ドメインサービスLINEドメインサービス。

95
00:09:10,870 --> 00:09:21,730
そして佐クエリーサービスあとはタスクリポジトリーが必要ですねとなので、FACTORYドメインサービスにクエリーサービス1個リポジトリー5個ですね。

96
00:09:22,830 --> 00:09:25,350
なので、まずはパパとかいていきましょう。

97
00:09:30,560 --> 00:09:38,780
5個必要だったので、5個作って1個目がタスク用のファクトリーでした。

98
00:09:39,080 --> 00:09:43,700
そして、2個目がタスク用のリポジトリでした。

99
00:09:45,380 --> 00:09:46,370
失礼しました。

100
00:09:48,680 --> 00:09:56,750
そして、タスクリポジトリとあとはドメインサービスですねで、ドメインサービスは社員とタスクでしたね。

101
00:09:57,560 --> 00:10:03,350
社員ドメインサービスがあって。

102
00:10:04,900 --> 00:10:06,760
そして。

103
00:10:07,930 --> 00:10:11,170
タスク上のドメインサービスがあって。

104
00:10:17,510 --> 00:10:23,210
そして最後をタスクのクエリーサービスですね。

105
00:10:23,210 --> 00:10:25,610
タスクのクエリーサービスがありますと。

106
00:10:31,630 --> 00:10:34,150
がありましたとでですね。

107
00:10:34,150 --> 00:10:42,490
これで終われたら楽なんですけれども、実装パターンを思い出してもらうとインターフェースが必要だとお伝えしました。

108
00:10:42,850 --> 00:10:43,360
えーとですね。

109
00:10:43,360 --> 00:10:53,350
リポジトリは使う側の都合に合わせるためにインターフェースを参照しましょうとお伝えしたので、まずはリポジトリに関してはインターフェースが必要だ

110
00:10:53,350 --> 00:11:01,930
し、先程クエリーサービスとリポジトリーはもう中間だとお伝えしたので、同様のロジックでクエリーサービスにもインターフェースが必要になってき

111
00:11:01,930 --> 00:11:02,590
ます。

112
00:11:02,770 --> 00:11:16,840
でまぁ設計上は特段困った論点はなくて、単純にクエリーサービスに紐づくインターフェースがありますよと明示しておけば十分です。

113
00:11:18,980 --> 00:11:19,520
こうですね。

114
00:11:19,880 --> 00:11:23,480
フェイスが存在します用法という具合です。

115
00:11:25,160 --> 00:11:35,900
でインターフェースに何を書くかっていうのはまだ紹介してなかったので、お話ししますとインターフェースに書くものはリポジトリの実装ルールとお伝え

116
00:11:35,900 --> 00:11:40,130
しましたじゃ実装ルールって何でしょうかというと。

117
00:11:41,600 --> 00:11:52,610
リポジトリとかクエリーサービスが持つべきメソッドのことを実装ルールという風に呼んでますなので、このタスククエリーサービスとあと、タスクリポジトリー

118
00:11:52,610 --> 00:12:02,540
にそれぞれの後ろ側にくっ付いてくるクラスが持つべきメソッドを一覧で、書いてあげればいいというそれだけのシンプルな話になってきます。

119
00:12:03,110 --> 00:12:08,720
なのでまずはタスクリポジトリーとタスククエリーサービスを。

120
00:12:09,750 --> 00:12:18,240
ルールとして整備してあげる必要があるので、じゃあリポジトリーが何を持っているかというと、シンプルにここですね。

121
00:12:18,630 --> 00:12:23,730
リポジトリーはセーブがあればいいですとで、引数はタスクですとシンプルですね。

122
00:12:24,300 --> 00:12:27,060
なのでタスクリポジトリーは。

123
00:12:28,110 --> 00:12:30,390
セレブ、そしてカッコ翼があればいいです。

124
00:12:30,390 --> 00:12:36,870
で、リポジトリは基本的にメソッドだけなので、変数属性は要らないです。

125
00:12:36,990 --> 00:12:43,110
そしてタスククエリーサービスも属性はいらないので、メソッドを見に行くと。

126
00:12:44,510 --> 00:12:46,700
タスククエリーサービスは。

127
00:12:47,950 --> 00:12:49,990
FINDERバイIDですね。

128
00:12:49,990 --> 00:12:54,220
タスククエリーサービスはFINDERIDを持っていればよさそうです。

129
00:12:54,490 --> 00:13:00,550
なのでタスククエリーサービスには、FINDERバイIDを持たせてあげれば、もうインターフェースはバッチリですと。

130
00:13:01,270 --> 00:13:02,470
そして。

131
00:13:03,510 --> 00:13:05,550
タスククエリーサービス。

132
00:13:06,400 --> 00:13:09,100
とインターフェースのタスククエリーサービスは。

133
00:13:11,070 --> 00:13:13,710
見ると書く。

134
00:13:13,710 --> 00:13:25,230
リポジトリーとかクエリーサービスはインターフェースと異なる実装だとエラーになるので、どうやって揃えるかというと、もう中身の構造を全く同じ

135
00:13:25,230 --> 00:13:27,930
にしましょうと、それだけのシンプルな論点です。

136
00:13:28,050 --> 00:13:29,880
なので見ると同じですねと。

137
00:13:31,180 --> 00:13:40,510
でこれ消すのでちょっとよく見ていてほしいんですけど、タスククエリーサービスとタスククエリーサービステスト用ってあったとしたときに。

138
00:13:41,900 --> 00:13:42,740
じゃ。

139
00:13:43,130 --> 00:13:56,570
開発中はこっちのテストのリポジトリーを使うし、本番になったら消してこっちをつけかえましょうっていう風に簡単に付け替えができるんです。

140
00:13:56,600 --> 00:14:02,900
これがインターフェースで実装の仕様がバッチリと定義されているってメリットになってきます。

141
00:14:04,260 --> 00:14:08,030
なので、タスクリポジトリが。

142
00:14:09,400 --> 00:14:11,230
必要ですねと。

143
00:14:14,810 --> 00:14:17,330
タスクリポジトリーが書いてないですね。

144
00:14:17,330 --> 00:14:18,350
失礼しました。

145
00:14:18,620 --> 00:14:22,130
まあ、ここをコピーする形でタスクリポジトリーがあればいいですね。

146
00:14:23,850 --> 00:14:24,960
こういった具合です。

147
00:14:28,170 --> 00:14:35,280
なので、リポジトリのインスタンスクエリサービスのインターフェースクエリサービスのインタフェースができたので。

148
00:14:36,080 --> 00:14:39,380
ここのサービスの後かは組み立てていきましょう。

149
00:14:41,430 --> 00:14:42,810
でちょっと待ってくださいね。

150
00:14:42,810 --> 00:14:43,320
まあ。

151
00:14:44,060 --> 00:14:48,860
ここのクエリーサービス同士はちょっとつながってるんで、先にも先だけつないでいきましょう。

152
00:14:48,860 --> 00:14:50,810
あとから細かく変えていきます。

153
00:14:51,200 --> 00:15:03,380
そうするとまず、シーケンス図上は、それと作成サービスがタスクファクトリーに流してファクトリーがドメインサービス2個につながっていくのでまずは。

154
00:15:07,950 --> 00:15:17,190
スレッド作成サービスはファクトリーに何らかの送りますねとで、ファクトリーはCREATEがあればいいですねと。

155
00:15:18,340 --> 00:15:27,760
なメソッドとしてはCREATEを用いますしで、タスクファクトリーが続いて後で。

156
00:15:29,590 --> 00:15:34,180
イグジストをドメインサービスに実行依頼するので。

157
00:15:35,640 --> 00:15:47,860
社員ドメインサービスとタスクとメインサービスが後ろにあって実行されるべきはISイグジストそしてスタッフ。

158
00:15:47,880 --> 00:15:59,070
ITが引きそうですねとこっちも同じようにタスクIDでISイグジストしますねとで、特段引数はひきそうじゃないですね。

159
00:15:59,070 --> 00:16:01,140
属性はいらなそうです。

160
00:16:01,170 --> 00:16:02,220
こんな感じです。

161
00:16:04,280 --> 00:16:08,540
そしてこれが終わったら。

162
00:16:10,350 --> 00:16:14,730
続いてタスクファクトリーから。

163
00:16:16,210 --> 00:16:19,960
スレッドを生成する必要がありますねと。

164
00:16:20,750 --> 00:16:33,770
あとはタスククエリーサービスにFINDBUGS、IDEを投げなきゃいけないですねとそうするとまずはタスククエリーサービスにタスクファクトリーから依頼

165
00:16:33,770 --> 00:16:35,090
を投げるので。

166
00:16:36,850 --> 00:16:38,890
順序としては。

167
00:16:40,120 --> 00:16:45,520
ここにこの2つ組が入ってきますねと分かってきます。

168
00:16:46,410 --> 00:16:48,060
そしてですね。

169
00:16:48,970 --> 00:16:57,340
その後にこのスレットっていうインスタンスが入ってくるので、これを表現してあげなきゃいけないですねと。

170
00:16:58,150 --> 00:16:59,230
まぁなので。

171
00:17:01,770 --> 00:17:08,880
ここで登場してきているスレッドがここでインスタンス化されますよとタスクですね。

172
00:17:08,880 --> 00:17:18,780
タスクとかスレッドがインスタンス化されないといけないので、タスクとスレッドをここに持ってきまして。

173
00:17:21,040 --> 00:17:27,849
で既に提起し終わっているものがでかでかといると、ちょっと邪魔なので、ちょっとちっちゃくしておきますね。

174
00:17:28,329 --> 00:17:29,740
そして。

175
00:17:33,880 --> 00:17:50,260
佐栗サービスによってタスクがインスタンス化されるし、そしてスレッドっていうものはタスクファクトリーから直接インスタンス化されるので。

176
00:17:51,030 --> 00:17:55,500
ここから直接つながっていていいでしょうという判断になります。

177
00:17:57,260 --> 00:17:58,910
そうすると。

178
00:18:00,440 --> 00:18:01,760
このぐらいですかね。

179
00:18:01,760 --> 00:18:05,330
THREADとタスクがあって、そして。

180
00:18:07,700 --> 00:18:13,790
続いて最後翼リポジトリーにパスを渡して終了になってくるので。

181
00:18:15,580 --> 00:18:18,460
孤高の翼リポジトリーを。

182
00:18:20,480 --> 00:18:26,630
スレッド作成サービスにくっつけてあげれば終わりじゃないでしょうか。

183
00:18:28,860 --> 00:18:39,360
こういった具合ですねなので、それと作成サービスがタスクファクトリーとタスクリポジトリーを持ってFACTORYが生成処理リポジトリーが保存処理

184
00:18:39,360 --> 00:18:41,190
を行うといった具合ですね。

185
00:18:41,250 --> 00:18:43,590
でFACTORYの生成処理は。

186
00:18:44,390 --> 00:18:48,350
POWERPOINTのスライドでもお伝えしたとおりかなり。

187
00:18:49,380 --> 00:18:58,770
複雑になってくるので、複雑な処理を担うということは当然ながらクラソースも複雑になってきますよねといった具合です。

188
00:18:59,750 --> 00:19:02,090
そして続いてじゃ。

189
00:19:02,090 --> 00:19:04,160
これらはこの。

190
00:19:05,420 --> 00:19:14,540
エンティティ値オブジェクトのクラス図と同じように線でつないであげて依存関係を表してあげなければいけないですでですね。

191
00:19:15,390 --> 00:19:18,600
これらのコントローラーとか。

192
00:19:19,770 --> 00:19:28,440
あのーサービスとかFACTORYとかリポジトリってそんなに深い参照関係はなくて基本的には依存。

193
00:19:29,440 --> 00:19:35,230
そして依存の中でもこのユーズを使っていけばほとんど賄えます。

194
00:19:35,530 --> 00:19:36,490
なので。

195
00:19:38,720 --> 00:19:39,470
ここの。

196
00:19:41,380 --> 00:19:43,420
書いてあるものをコピーして。

197
00:19:44,840 --> 00:19:45,440
でですね。

198
00:19:45,440 --> 00:19:52,490
もうTHREADファクトリーに対してTHREAD作成が使うしっていう感じですね。

199
00:19:52,520 --> 00:19:56,120
で、ここはCREATEじゃなくてユーズになってきます。

200
00:19:59,770 --> 00:20:00,790
こんな感じですね。

201
00:20:00,820 --> 00:20:04,810
で、これはもうタスクファクトリーはCREATECREATEANDSEIBU。

202
00:20:06,180 --> 00:20:09,420
のメソッドの中から呼ばれますよっていう何て言うんですかね。

203
00:20:09,420 --> 00:20:15,360
どこから使われるのかっていうのを限定するっていう意味で、依存のユーズを使います依存のユーズ。

204
00:20:16,690 --> 00:20:21,880
なのでタスクファクトリーはスレッドサービスから呼ばれますよっていう依存関係を表わしています。

205
00:20:22,180 --> 00:20:27,520
で、これはユーズに関してはもう当たり前すぎてたくさん出てくるんです。

206
00:20:27,640 --> 00:20:37,210
なのでたくさん出てくるものに、いちいち融通って何個も書くと邪魔なので、ユーズの文字は省略することが結構多いので、これ以降は決して

207
00:20:37,210 --> 00:20:41,230
もう融通な文字は消して線だけ繋いでいこうと思います。

208
00:20:41,620 --> 00:20:42,850
こういった具合ですね。

209
00:20:42,850 --> 00:20:44,590
こんな風に表していきます。

210
00:20:45,650 --> 00:20:47,810
で、もうこれらは全部。

211
00:20:48,550 --> 00:20:55,300
線でつなげばいいので、あと特筆すべき論点はこのインターフェースだけ線の繋ぎ方が違います。

212
00:20:55,330 --> 00:20:57,700
インターフェイスだけ先のつなぎ方が違います。

213
00:20:58,120 --> 00:21:04,900
何かというと、点線に白三角形を描いてあげましょうってのが、インターフェイスの記述ルールになっています。

214
00:21:05,320 --> 00:21:13,240
まあ、特に細かい理由はないので、インターフェイスはそういう風に書くんだなと覚えておいていただければまったく問題ないです。

215
00:21:14,320 --> 00:21:15,160
なので。

216
00:21:15,930 --> 00:21:20,430
点線にしろ三角だなあと覚えておけばいいので。

217
00:21:21,260 --> 00:21:25,730
点線にしろ三角なのでこうですね。

218
00:21:25,730 --> 00:21:27,980
INTERFACEの表現ができました。

219
00:21:27,980 --> 00:21:29,390
ちょっと見にくいですね。

220
00:21:33,240 --> 00:21:35,130
点線にしろ三角。

221
00:21:37,330 --> 00:21:38,800
これでいいんじゃないでしょうか。

222
00:21:38,830 --> 00:21:42,880
点線にしろ、三角でインターフェースの表現ができました。

223
00:21:44,980 --> 00:21:53,800
で、タスククエリーサービスからタスクを呼び出しますよってのは別に、ただの参照関係なので、難しいことを考えずに、ただの関連として書い

224
00:21:53,830 --> 00:21:55,480
てあげれば大丈夫です。

225
00:21:57,310 --> 00:22:08,440
そしてタスクファクトリーからそれぞれのドメインサービスとかクエリーサービスを呼び出すので、単純に使いますよーという融通を表現してあげればばっち

226
00:22:08,440 --> 00:22:09,550
り問題ないです。

227
00:22:10,960 --> 00:22:19,480
でタスククエリーサービスを呼び出しますようだったり、社員ドメインサービスを呼び出します用語だったり。

228
00:22:21,040 --> 00:22:22,420
といった具合ですね。

229
00:22:24,530 --> 00:22:30,260
そしてあとはなにかあるかと言いますと。

230
00:22:32,660 --> 00:22:33,470
ここですね。

231
00:22:33,470 --> 00:22:40,550
タスクファクトリーからタスククエリーサービスを呼び出しますねなので、ここにも線を繋いでおきましょう。

232
00:22:41,900 --> 00:22:43,100
こういった具合です。

233
00:22:44,680 --> 00:22:50,860
でだいぶ詰まってきたので、ちょっとゆとりを持たせるように場所を変えておきましょう。

234
00:22:52,180 --> 00:22:55,660
ちょっとこれを上の方にずらしていけばいいんじゃないでしょうか。

235
00:22:56,650 --> 00:22:57,190
こうですね。

236
00:22:57,220 --> 00:23:02,230
で、スレッドをこの辺の上に移動させておけば、パッチリかなと思います。

237
00:23:04,270 --> 00:23:07,630
そしてタスクリポジトリの方はこれだけですね。

238
00:23:07,630 --> 00:23:10,570
難しいことはなかったかなと思います。

239
00:23:11,680 --> 00:23:12,880
そして最後。

240
00:23:12,910 --> 00:23:15,610
有翼ファクトリーの属性が残ってますね。

241
00:23:15,640 --> 00:23:19,780
で、タスクファクトリーの属性なんですけれども。

242
00:23:21,150 --> 00:23:27,930
もうこのタスククリーンサービスをタスクFACTORYから使うので。

243
00:23:29,730 --> 00:23:30,690
これと同じですね。

244
00:23:30,690 --> 00:23:41,940
タスクリポジトリーを使うサービスにタスクリポジトリーを持たせるので、同様にタスク区切りサービスを使うユースケースタスクファクトリですね。

245
00:23:41,940 --> 00:23:43,830
タスクFACTORYの方には。

246
00:23:45,520 --> 00:23:50,020
タスククエリーサービス。

247
00:23:50,990 --> 00:24:00,170
を引数として持たせてあげましょうとで、こっちはSLACKの方でもお伝えしたんですけども、くぎりサービスを使う側のクラスに引数で入れ

248
00:24:00,170 --> 00:24:04,190
てあげるっていうそれだけなので、もうルールとして覚えちゃえば大丈夫です。

249
00:24:04,850 --> 00:24:12,200
リポジトリーを使うサービスの引数として、属性として持たせるとで、クエリーサービスも同様に使用する。

250
00:24:12,200 --> 00:24:16,220
顔のクラスに属性として渡しといてあげるとそういった具合です。

251
00:24:16,400 --> 00:24:19,370
名前としてはDEPENDENCYインジェクションという名前がありました。

252
00:24:24,670 --> 00:24:31,060
なのでスレッド作成するための必要なクラスの一式はこうですという風に見えてきました。

253
00:24:32,470 --> 00:24:36,850
なので続いてSLACK通知サービスについても整理してあげましょう。

254
00:24:38,430 --> 00:24:46,830
あと、個々の依存関係が描けていなかったので、まぁシンプルにユーズで繋いであげればいいんじゃないでしょうか。

255
00:24:49,920 --> 00:25:00,600
あとはここも難しいことを考えず、単純に使用するっていう関係があるので、点線で繋いでおけばバッチリかと思いますでですね。

256
00:25:00,600 --> 00:25:04,620
次SLACK通知サービスに関しては。

257
00:25:05,460 --> 00:25:08,340
登場するものはシンプルですね。

258
00:25:09,920 --> 00:25:20,000
通知先のクエリーサービスとSLACKAPIクライアントとあと通知先のエンティティが出てくれればよさそうですと。

259
00:25:21,300 --> 00:25:30,510
で、クリスサービスは先程と同様にインターフェースを作る必要があるので、これをコピーして持ってきてあげましょう。

260
00:25:32,330 --> 00:25:36,230
なので、通知先クエリーサービスがあるわけです。

261
00:25:38,290 --> 00:25:44,800
そしてここに通知先クエリーサービスと書いて上げて、そして。

262
00:25:49,830 --> 00:25:51,570
名前としては。

263
00:25:52,400 --> 00:25:52,970
こうですね。

264
00:25:52,970 --> 00:25:54,650
GETNOTIFYインフォ。

265
00:25:55,070 --> 00:26:00,650
そして引数はTHREADIDっていうふうにも指定しておいたのでここで。

266
00:26:03,410 --> 00:26:06,230
GETのてFINEほのスレットじゃないですね。

267
00:26:06,230 --> 00:26:09,680
タスクスタッフIDとして渡してあげればいいし。

268
00:26:10,980 --> 00:26:21,330
INTERFACEと全く同じ実装にしないとエラーが出るので、クエリーサービスの実装クラスも同じようにGETNOTIFYインフォを用意しておい

269
00:26:21,330 --> 00:26:22,290
てあげましょうと。

270
00:26:23,000 --> 00:26:31,130
そしてクエリーサービスの結果、通知先エンティティが取れてくるので、通知先エンティティを。

271
00:26:34,110 --> 00:26:36,900
ここに持ってきてあげて。

272
00:26:37,690 --> 00:26:41,920
クエリーサービスを呼び出した結果、通知先。

273
00:26:42,920 --> 00:26:46,460
エンティティがインスタンス化されて。

274
00:26:47,600 --> 00:26:49,850
とれてきますよというふうに。

275
00:26:51,000 --> 00:26:52,230
明示してあげます。

276
00:26:52,260 --> 00:26:54,440
ちょっと線が乱れましたねすいません。

277
00:26:56,200 --> 00:26:59,080
こんな風にやってあげればいいんじゃないでしょうか。

278
00:27:04,900 --> 00:27:06,220
こういった具合です。

279
00:27:07,780 --> 00:27:08,920
ちょっと線が汚いですね。

280
00:27:08,920 --> 00:27:10,840
ちょっとつなぎ直すのでお待ちください。

281
00:27:14,050 --> 00:27:16,750
そして、この先のルールを。

282
00:27:23,100 --> 00:27:29,010
ナシナシにして、そして点線を実線に戻してこういう具合ですね。

283
00:27:30,800 --> 00:27:31,670
なので。

284
00:27:32,700 --> 00:27:35,280
SLACK通知のサービスから。

285
00:27:39,160 --> 00:27:52,810
通知先クエリーサービスに情報を取ってきてくださいという依頼が渡って、そして通知先のクエリーサービスが実行されて、通知先のインスタンス

286
00:27:52,810 --> 00:27:55,510
が取れますよと、そういう風な関係になっていきます。

287
00:27:56,020 --> 00:27:57,250
そして。

288
00:27:59,650 --> 00:28:08,080
通知先の情報が取れたら、SLACKのAPIクライアントに。

289
00:28:10,420 --> 00:28:12,760
通知のリクエストが飛ぶので。

290
00:28:16,660 --> 00:28:17,680
こうですね。

291
00:28:19,240 --> 00:28:26,530
でSLACKAPIクライアントに持たせるべき情報は何だったかというと。

292
00:28:28,400 --> 00:28:29,510
以上ここですね。

293
00:28:29,510 --> 00:28:32,900
SLACKAPIクライアントに対して。

294
00:28:33,840 --> 00:28:42,900
トークン情報とスレッドサマリーっていうものを渡してで、1000度メソッドを実行してあげましょうという風に書いてあります。

295
00:28:43,110 --> 00:28:55,830
なのでこれ考え方として2択はあるんですけれども、SLACKクライアントの属性としてトークンを持たせてあげるっていう考え方もあるし、あとは

296
00:28:56,070 --> 00:28:56,670
ですね。

297
00:28:56,670 --> 00:29:01,560
SLACKAPIクライアントだと確かメソッドが鮮度を持ってたと思いますでですね。

298
00:29:02,130 --> 00:29:17,850
この鮮度メソッドを実行する時に、トークンとあとはサマリーを入れてあげて、こっちの引数は属性はなしっていう風にするのもあるし、もしくは

299
00:29:17,850 --> 00:29:20,970
こういう風にもTHREADじゃなかったやつですね。

300
00:29:20,970 --> 00:29:32,760
SLACKAPIクライアントの属性としてトークを持たせてあげて、その自分自身が持っているトークン情報をセンドする時に引数に渡してあげましょ

301
00:29:32,760 --> 00:29:33,390
うみたいな。

302
00:29:33,510 --> 00:29:42,780
まあ、2種類の設計思想があるんですけれども、どちらでももう現場のルール次第なので、どちらでも構わないので、私はSLACKAPIクライアント

303
00:29:42,810 --> 00:29:49,050
をインスタンス化する時にトークン情報をもたせた方がまあ分かりやすいかなと思ったんで、こちらに置いておきました。

304
00:29:50,250 --> 00:29:53,490
まぁ、このくらいでいいんじゃないでしょうか。

305
00:29:53,760 --> 00:29:57,840
あと、あえて言うんであればえっとですね。

306
00:29:57,840 --> 00:30:08,810
実装パターンの7個目にエラー確認用のクラスを置いておくといいんじゃないでしょうかとお伝えしたのを覚えてますでしょうか。

307
00:30:10,900 --> 00:30:11,560
ITですね。

308
00:30:11,560 --> 00:30:12,910
確認するのでは待ってください。

309
00:30:12,910 --> 00:30:13,810
これですね。

310
00:30:13,810 --> 00:30:15,370
例外クラスですね。

311
00:30:15,370 --> 00:30:16,900
例外クラスっていうのは。

312
00:30:16,930 --> 00:30:23,740
APICLIENTを実行した結果、問題がなかったかみたいなものをチェックする為のクラスになってます。

313
00:30:24,340 --> 00:30:25,600
なのでまあ。

314
00:30:27,040 --> 00:30:32,830
SLACKエラーみたいなクラスを定義しておいてあげて特段。

315
00:30:33,310 --> 00:30:45,220
こういう風にメソッドも引数もメソッドも属性もいらないので、ただただこういう風に形だけ定義してあげれば大丈夫です。

316
00:30:45,250 --> 00:30:57,130
で、具体的な実装方法をご存じない方は例外クラス実装方法っていう風に調べていただければ、たくさん情報が出てくるので、ご覧になってみ

317
00:30:57,130 --> 00:30:58,960
ていただくといいんじゃないかなと思います。

318
00:31:00,090 --> 00:31:06,650
まという具合にして、シーケンス図をベースにしていった感じですね。

319
00:31:06,660 --> 00:31:20,010
シーケンス図をベースにして登場するクラスと、そしてそれぞれのクラスが持つべきメソッドっていうものが明らかになって、そしてメソッドを実行する

320
00:31:20,010 --> 00:31:21,270
ために付随する。

321
00:31:21,690 --> 00:31:24,930
属性が何なのかっていう風に整理していって。

322
00:31:25,870 --> 00:31:33,340
具体的にコントローラーとかサービスに関するクラスの一覧を整理することができました。

323
00:31:33,760 --> 00:31:35,140
こんなふうにして。

324
00:31:36,320 --> 00:31:38,030
ロバストネス分析から。

325
00:31:38,870 --> 00:31:47,270
シーケンス図を作って、シーケンス図からクラス図を作ってで、ここまで来るとプログラマーさんにこういうふうに実装してくださいと明確な依頼

326
00:31:47,270 --> 00:31:49,100
ができるという流れになってきます。

327
00:31:49,900 --> 00:31:52,720
以上が詳細設計のワークでした。

328
00:31:54,180 --> 00:31:58,110
次のパートでは、詳細設計のまとめを行っていこうと思います。

