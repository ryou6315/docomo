1
00:00:00,770 --> 00:00:03,050
では、ワーク用のシートに戻ってきました。

2
00:00:03,290 --> 00:00:13,220
これは先程作ったロバスト分析の図になってきますで、この右側のシーケンス図のシートに作っていくんですけれども、シーケンス図をどの着眼

3
00:00:13,220 --> 00:00:21,080
点から開始すればいいかと言いますと、このコントローラーに着眼して処理作業を進めていくといいかなと思います。

4
00:00:21,110 --> 00:00:35,330
なのでTHREAD作成コントローラーに着眼して、それに結び付くスレッド作成サービスと、そしてSLACK通知サービスっていうものを考えていけばいい

5
00:00:35,330 --> 00:00:36,950
んじゃないかなと思います。

6
00:00:37,460 --> 00:00:44,210
なのでこのスレッド作成コントローラーを中心にシーケンス図考えていきましょうという流れです。

7
00:00:44,570 --> 00:00:45,410
でですね。

8
00:00:46,300 --> 00:00:55,720
ちょっとこれ何度も参照するので、スクリーンショットを撮っておいて、シーケンス図の画面にちょっと貼っておこうかなと思います。

9
00:00:56,650 --> 00:00:57,700
こういった具合ですね。

10
00:01:01,760 --> 00:01:07,370
では、これをベースにしてシーケンス図を作っていこうと思いますでですね。

11
00:01:07,400 --> 00:01:14,030
まず、THREAD作成コントローラーを起点にしましょうと言ったので、まずはTHREAD作成の全体。

12
00:01:15,550 --> 00:01:26,410
を統括するシーケンス図があるというし、このスレッド作成に関するスレッド作成サービスに関するシーケンス図があるというし、SLACK通知サービス

13
00:01:26,410 --> 00:01:34,390
に関するシーケンス図があるといいよねといったように、管理担当のクラスを起点にしてシーケンス図を分けていくといいです。

14
00:01:35,020 --> 00:01:47,350
なので結論からお伝えすると、さきほどお見せした成果物イメージのページなんですけれども、スレッド作成コントローラーからスレット作成サービスSLACK

15
00:01:47,350 --> 00:01:51,010
通知サービスに処理の依頼が飛ぶんですけども。

16
00:01:52,180 --> 00:01:55,450
スレッド作成サービスは別の。

17
00:01:57,140 --> 00:02:05,840
別のスレッド作成サービスのシーケンス図2参照してくださいとかあとSLACK通知サービスは別のSLACK通知サービスのシーケンス図を参照して

18
00:02:05,840 --> 00:02:17,480
くださいといった具合に、コントローラーが全体ハンドリングを担って、そしてサービスはサービスで別のシーケンス図を作りましょうという風に考えて

19
00:02:17,480 --> 00:02:19,100
いますでですね。

20
00:02:19,820 --> 00:02:23,510
このスレッド画面も別で参照があるんですけども。

21
00:02:24,650 --> 00:02:25,940
見ていただくとおり。

22
00:02:25,970 --> 00:02:35,480
そのスレット取得コントローラーとそれと取得サービスは大して論点がないので、今回はそれと作成サービスとSLACK通知サービスの2つに焦点を当て

23
00:02:35,510 --> 00:02:37,190
ていこうかなと思います。

24
00:02:37,700 --> 00:02:39,080
なので作るべきは。

25
00:02:39,830 --> 00:02:52,190
このスレッド作成に関する1連のコントローラーのハンドリングの様子と、そしてスレッド作成サービスのシーケンス図SLACK、通知サービスのシーケンス図

26
00:02:52,190 --> 00:02:56,510
といったように、3つのシーケンス図を作っていきましょうというワークになっていきます。

27
00:02:57,380 --> 00:02:59,330
なので、まずは。

28
00:03:00,040 --> 00:03:03,610
この全体のスレッド作成コントローラーが。

29
00:03:04,710 --> 00:03:13,440
それと作成画面からリクエストを受け取って、そして各サービスに処理を流していくっていう、そこのハンドリングの様子をまず書いていきましょう。

30
00:03:16,890 --> 00:03:21,570
ではシーケンス図に必要な要素はと言いますと。

31
00:03:24,970 --> 00:03:27,160
まずはタイトルを作ってあげましょう。

32
00:03:28,060 --> 00:03:29,470
タイトルとして

33
00:03:32,320 --> 00:03:32,370
は。

34
00:03:33,910 --> 00:03:39,850
スレッド作成画面に関するシーケンス図ですよと明記しておきます。

35
00:03:50,150 --> 00:03:51,800
では進めていきましょう。

36
00:03:51,800 --> 00:03:54,320
まずは必要なものとしては。

37
00:03:56,290 --> 00:04:04,570
登場人物としてアクターが必要ですねとあとは個々のコントローラーとかスレッド作成。

38
00:04:04,570 --> 00:04:11,800
画面のバウンダリとかはロバスト分析で使ったものと同じなので、コピーしてあげればいいんじゃないかなと思います。

39
00:04:11,830 --> 00:04:24,970
なのでスレッド作成画面だったり、あとはスレッド作成コントローラーだったりとか、あとはスレッド作成サービスSLACK通知サービスあとはスレッド画面

40
00:04:24,970 --> 00:04:25,540
ですね。

41
00:04:26,380 --> 00:04:31,150
これらをコピーして持ってきてあげればいいんじゃないかなと思います。

42
00:04:34,060 --> 00:04:37,750
こうですねなのでアクターである。

43
00:04:37,750 --> 00:04:56,530
プログラマーさんが起点となってスレッド作成画面に入って、そしてスレッド作成画面がスレッド作成のコントローラーに処理を流して、そしてコントローラー

44
00:04:56,530 --> 00:05:01,060
がスレッド作成サービスに処理を流して。

45
00:05:02,080 --> 00:05:07,480
また、別のところでSLACK通知サービスに処理を流して。

46
00:05:09,540 --> 00:05:10,470
最後。

47
00:05:11,280 --> 00:05:16,170
全部終わったらスレッド画面に行きますよねとこういった具合です。

48
00:05:17,900 --> 00:05:21,110
そして表記ルールがいくつかありましたね。

49
00:05:22,100 --> 00:05:23,000
まずは。

50
00:05:24,220 --> 00:05:29,350
このライフライン登場するクラスに対して縦の点線を付けてあげます。

51
00:05:29,380 --> 00:05:30,640
縦の戦線です。

52
00:05:30,790 --> 00:05:39,340
そして、必要に応じて、この白塗りの棒を縦棒をつけてあげましょうという具合なので、まずは点線を用意しておきましょう。

53
00:05:40,560 --> 00:05:42,180
あまつにこの縦棒をですね。

54
00:05:42,180 --> 00:05:47,490
縦棒とあとは点線を用意してあげればいいですなので。

55
00:05:48,830 --> 00:05:52,400
この縦棒を持ってくればいいので。

56
00:05:56,700 --> 00:05:57,510
こうですね。

57
00:06:01,440 --> 00:06:03,240
縦の長い棒を用意してあげます。

58
00:06:03,600 --> 00:06:05,130
ちょっと見づらいので。

59
00:06:07,060 --> 00:06:08,560
このぐらい太くしてあげましょう。

60
00:06:11,170 --> 00:06:12,580
これでいいんじゃないでしょうか。

61
00:06:19,130 --> 00:06:22,370
そして各クラスに対して。

62
00:06:23,720 --> 00:06:26,840
これをくっつけていけば準備が完了です。

63
00:06:38,380 --> 00:06:39,550
こういった具合ですね。

64
00:06:42,830 --> 00:06:45,350
ちょっと斜めになっているんで戻しておきます。

65
00:06:52,730 --> 00:06:54,260
では進めていきましょう。

66
00:06:56,200 --> 00:06:57,100
まず。

67
00:06:59,000 --> 00:07:07,190
すべての処理は、プログラマーさんが起点になってスレッド作成しましょうっていう風に始まっていくので、まずライフラインはここから。

68
00:07:07,870 --> 00:07:08,680
いたとしますね。

69
00:07:08,690 --> 00:07:20,060
プログラマーのライフラインからスレッド作成画面に何かしら行って、そしてコントローラーに何かしら処理が飛んでいくので、ライフラインとしてはまずは。

70
00:07:20,970 --> 00:07:23,640
こんな具合につながっていくんじゃないでしょうか。

71
00:07:27,080 --> 00:07:33,380
そしてスレット作成処理に何らかパスが渡るよとまあ、このぐらい用意しておけば大丈夫でしょう。

72
00:07:34,150 --> 00:07:35,320
そして。

73
00:07:40,570 --> 00:07:41,290
まず。

74
00:07:48,800 --> 00:07:57,500
このように処理がスタートしますで、メッセージは点線じゃなくて、通常の線で表現します。

75
00:07:57,530 --> 00:07:58,370
ここですね。

76
00:07:58,820 --> 00:08:00,020
そして。

77
00:08:01,830 --> 00:08:04,500
ここに何を書くかというと。

78
00:08:09,990 --> 00:08:11,130
プログラマーからすれた。

79
00:08:11,130 --> 00:08:19,020
作成画面に関してはメソッドの呼び出しではないので、それど作成というふうにユーザーが行う処理を書いておけばいいんじゃないでしょうか。

80
00:08:20,310 --> 00:08:26,640
そしてスレッド作成画面では何をやるかというとこうですね。

81
00:08:26,640 --> 00:08:37,440
バリデーションを行うっていうふうに書いてあるので、これスレッド作成画面上でJAVASCRIPTが自分で動くので、これは特段難しいこと考えず

82
00:08:37,470 --> 00:08:40,530
に自分自身でウェブ上で。

83
00:08:43,470 --> 00:08:45,930
やりますよねというお話なので。

84
00:08:48,700 --> 00:08:49,420
ここに。

85
00:08:50,580 --> 00:08:55,320
自分自身で自分自身にチェックを入れる時にはこういう。

86
00:08:56,840 --> 00:09:02,060
ぐるっとしたものを書くとよくて、ここにバリデーションと書いておけば大丈夫です。

87
00:09:04,380 --> 00:09:11,910
なので、他のクラスに依頼するのではなくて、自分自身で処理するっていうときにはこういうふうにぐるっとしたものを描いてあげれば大丈夫

88
00:09:11,910 --> 00:09:12,420
です。

89
00:09:15,030 --> 00:09:26,400
そしてバリデーションがクリアされたら、それと作成画面からスレッド作成のコントローラーに何らか依頼が飛びますねとというお話です。

90
00:09:27,400 --> 00:09:33,180
そうすると、ここで初めて具体的なメソッド名が登場するんですけれども。

91
00:09:35,780 --> 00:09:46,490
スレッドを保存しましょうっていう依頼なので、セーブスレッドっていうメソッドがスレッド作成のコントローラーに持たされているといいんじゃないか

92
00:09:46,490 --> 00:09:47,720
なと思います。

93
00:09:48,230 --> 00:09:49,220
こんな感じですね。

94
00:09:50,820 --> 00:09:54,390
西部THREADっていうものを持たせてあげます。

95
00:09:54,870 --> 00:09:57,510
そして、ライフラインをここにちょっと上げてあげましょう。

96
00:09:59,950 --> 00:10:01,210
こういった怖いですね。

97
00:10:01,240 --> 00:10:11,680
なのでそれと作成画面では、プログラマーさんがスレッド作成を画面上で行って、画面上ではJAVASCRIPTでバリデーションが走ってバリデーション

98
00:10:11,680 --> 00:10:12,820
をクリアしたらセーブ。

99
00:10:12,820 --> 00:10:17,920
THREADっていうメソッドがコントローラーから呼び出されて処理が始まるよというお話です。

100
00:10:19,880 --> 00:10:28,580
まぁ、なので特段ここまでで整理した内容となんら変わりないので、そんなに難しい論点ではないんじゃないかなと思います。

101
00:10:29,270 --> 00:10:37,670
では、続いてこのスレッド作成コントローラーがスレッド作成サービスに何かしら依頼を行うのを考えると。

102
00:10:40,260 --> 00:10:42,960
このスレッド作成サービスの責務としては。

103
00:10:44,040 --> 00:10:54,870
インスタンスを生成したり、チェックを行ったり後保存するっていう1連の流れがあるので、CREATEANDセーブっていう風に書いておけば分かる

104
00:10:54,900 --> 00:10:56,130
んじゃないかなと思います。

105
00:10:56,250 --> 00:10:58,710
これは現場ごとに正解はないので。

106
00:10:59,710 --> 00:11:06,070
明るいやすければ極論なんでもいいので、あんまりシビアになっても仕方ないかなとは思います。

107
00:11:06,830 --> 00:11:12,080
なので私の方では、CREATEANDセーブっていう風に名前を付けておこうと思います。

108
00:11:16,450 --> 00:11:17,500
こういう具合ですね。

109
00:11:23,500 --> 00:11:33,910
そしてスレッド作成サービスに関しては、また別のシーケンス図に分割した方が責務の範囲がわかりやすいとお伝えしたので別の。

110
00:11:34,790 --> 00:11:38,750
シーケンス図に分けるっていう結合フラグメントを描きたいので。

111
00:11:39,890 --> 00:11:41,840
結合フラグメント用の。

112
00:11:42,630 --> 00:11:43,860
図を描いておきましょう。

113
00:11:43,860 --> 00:11:44,910
ここですね。

114
00:11:45,420 --> 00:11:47,580
なのでちょっと小さくしてあげて。

115
00:11:49,020 --> 00:11:53,220
まあ色分けしておくとわかりやすいので、こんな風に書いておけばいいんじゃないでしょうか。

116
00:11:54,560 --> 00:12:02,720
そしてこのフレームはリファレンスっていうレフを表して別のシーケンス図を参照していると表現したいので。

117
00:12:03,680 --> 00:12:13,400
具体的にどこを参照しているかというと、スレッド作成サービスを参照していますよと明記してあげます。

118
00:12:13,910 --> 00:12:14,930
こういった具合ですね。

119
00:12:16,480 --> 00:12:26,920
なので、プログラマがスレッド作成画面上でスレッド作成を行ってバリデーションを行って、そしてコントローラにセーブスレッドのリクエストが飛んで、

120
00:12:26,920 --> 00:12:38,320
そして具体的な責務を担うスレッド作成サービスにスレッドを作成してチェックして保存してくださいっていうリクエストが飛ぶので、それらをこのスレッド

121
00:12:38,320 --> 00:12:42,830
作成サービスのサービス内でさばきましょうというところまで表現できました。

122
00:12:44,130 --> 00:12:44,940
なので。

123
00:12:45,960 --> 00:12:51,390
このスレッド作成サービスに関してはまた次書くので。

124
00:12:52,170 --> 00:12:59,100
このぐらいにしておいて、次SLACK通知サービスの方に進んでいきましょうでですね。

125
00:12:59,100 --> 00:13:11,250
スレッドが作成し、終わってデータベースにデータが保存されたらSLACK通知を行いたいので、SLACK通知にどんな責務があるかという考える

126
00:13:11,250 --> 00:13:13,220
とこうですねと。

127
00:13:14,220 --> 00:13:21,180
クエリサービスで通知先を取ってきて、そして通知を送ってエラーチェックするっていう話ですね。

128
00:13:21,690 --> 00:13:25,500
なのであのー通知先。

129
00:13:26,340 --> 00:13:28,290
おっとって来なきゃいけないのだと。

130
00:13:28,320 --> 00:13:31,200
では、GETトークンそして船頭。

131
00:13:32,130 --> 00:13:43,290
NOTIFYとかあとチェックエラーみたいな感じで、ちょっと3つに分かれそうな気もするんですけど、逆にもうSLACK通知っていう1連で考える

132
00:13:43,290 --> 00:13:54,540
と、通知先取ってきて送信してエラーチェックって3つまとまってるのはわりかし集中の時節だと思うので、こういう時は変に分けすぎると

133
00:13:54,570 --> 00:14:03,660
大きな処理のまとまり責務のまとめが見えなくなるので、あえて1個にまとめてまとめるっていうのも大事なポイントになってきます。

134
00:14:04,140 --> 00:14:10,440
なのでSLACK通知サービスに関しては、ごちゃごちゃ書かずに。

135
00:14:12,120 --> 00:14:13,560
もうシンプルに。

136
00:14:15,670 --> 00:14:18,670
通知しますとシンプルに書いてもいいんじゃないでしょうか。

137
00:14:22,260 --> 00:14:24,130
なのでこうですね。

138
00:14:24,250 --> 00:14:35,470
細かいことはごちゃごちゃ書かずにもうSLACKに通知しますとそういう話ですねで、ちょっと経験の浅いプログラマーさんにこういう資料を見せる際

139
00:14:35,470 --> 00:14:46,210
にはSLACK通知ってSLACKAPIがあってトークンを取ってきてでAPIリクエストを投げてエラーチェックするよねっていう3段構えが常識

140
00:14:46,210 --> 00:14:54,910
だとは知らない方もいたりするんで、プログラマーさんのレベルに合わせてどこまで細分化するかは考えたらいいと思うんですけども。

141
00:14:54,940 --> 00:15:03,520
慣れてる人からすると、NOTIFY1個でわかるよっていう人の方が慣れてる人からすると多いと思うので、私はこういう風に一旦紹介します。

142
00:15:05,040 --> 00:15:06,060
そして。

143
00:15:06,820 --> 00:15:12,190
細かくはSLACK通知サービスに渡しましょうという感じですね。

144
00:15:14,080 --> 00:15:14,920
こんな感じです。

145
00:15:15,800 --> 00:15:21,170
そしてSLACK通知サービスに処理が飛んだら。

146
00:15:23,140 --> 00:15:27,520
何らかレスポンスが返ってきて、じゃあこれを。

147
00:15:30,330 --> 00:15:41,040
レスポンスは点線で表現するとお伝えしたので、こんな風にして、そしてSLACK通知サービスの結果通知がうまくいったのか行かなかったの

148
00:15:41,040 --> 00:15:41,400
か。

149
00:15:41,760 --> 00:15:51,060
例えば、そのSLACKがSLACKのサーバー側で何かエラーが起きてたりとかすると、当然システム内部で何かしらエラーハンドリングしないといけ

150
00:15:51,060 --> 00:15:59,040
ないので、成功は失敗っていうエラーチェック用のクラスが成功。

151
00:15:59,070 --> 00:16:01,470
失敗を判定した結果を。

152
00:16:02,260 --> 00:16:09,640
コントローラー側で受け取って失敗だったら失敗で画面上にSLACK通知に失敗しました。

153
00:16:09,640 --> 00:16:18,370
プログラマーさんに直接会話しましょうみたいなアラートメッセージを表示するっていう制御にも繋げられるので、ここでしっかりとSLACK通知サービス

154
00:16:18,370 --> 00:16:24,070
からコントローラーに対して成功、もしくは失敗っていうものを通知してあげるといいんじゃないかなと思います。

155
00:16:24,820 --> 00:16:27,310
そして最後スレッド画面ですね。

156
00:16:27,910 --> 00:16:39,490
で、具体的にシーケンス図は描かないとお伝えしたんですけれども、本来プログラムを書いていく前段階ではここに書いておくといいので、

157
00:16:39,550 --> 00:16:42,820
一応ボックスだけは用意しておこうと思います。

158
00:16:43,580 --> 00:16:44,450
こうですね。

159
00:16:45,770 --> 00:16:49,730
スレッド画面に飛んで、そして。

160
00:16:55,540 --> 00:16:58,060
何を行うかというとですね。

161
00:16:58,060 --> 00:17:07,660
何を行うかというと、スレッド作成コントローラからスレッド画面に向けて何を行なうかというとここですね。

162
00:17:07,660 --> 00:17:13,000
スレッドへ遷移しましょうという処理をコントローラーが担っています。

163
00:17:13,030 --> 00:17:13,839
なので。

164
00:17:14,960 --> 00:17:18,680
まぁ、スレッド遷移というよりかはリダイレクト処理ですね。

165
00:17:21,089 --> 00:17:26,849
あとは完了通知みたいなものがあるといいんじゃないでしょうか。

166
00:17:29,850 --> 00:17:41,490
で、これはあのリダイレクトに関しては具体的に何かメソッドを呼び出すわけじゃないので、こういうメソッドを呼び出すときはメソッド名で隠しメソッド

167
00:17:41,490 --> 00:17:46,230
じゃなくて、こういう処理ですよっていうふうに例えば。

168
00:17:47,070 --> 00:18:00,360
コントローラーのリターンとしてHTTPDRESPONSEで例えばJASONとか返すときもあるし、リターンで何か返さずに別の画面にリダイレクトする

169
00:18:00,360 --> 00:18:04,920
みたいな処理もあったりするんで、そのリダイレクト処理とかそういう。

170
00:18:04,920 --> 00:18:12,420
メソッドを呼び出すわけじゃない時には、日本語で何をやってほしいよっていう風に明記しても全然伝わるので大丈夫です。

171
00:18:15,130 --> 00:18:22,360
ここまでで、スレッド作成画面に関する1連のシーケンス図を表現することができました。

172
00:18:24,280 --> 00:18:32,830
続いては、スレッド作成サービスのシーケンス図を作って、その後SLACK通知サービスのシーケンス図を作っていくっていう流れです。

