1
00:00:01,000 --> 00:00:05,290
それでは、最後SLACK通知サービスについてシークエンス図を作っていきましょう。

2
00:00:05,830 --> 00:00:13,470
これはスレッド作成サービスより話の少ないので、さくさくと終わらせていこうかなと思います。

3
00:00:13,900 --> 00:00:19,750
ちょっと見やすいように、まずはスクリーンショットを撮っておいてで下に貼り付けておきましょう。

4
00:00:22,510 --> 00:00:23,650
この辺ですね。

5
00:00:26,070 --> 00:00:28,440
この辺に貼り付けておきます。

6
00:00:31,630 --> 00:00:43,450
ではまず何が切手になるかというと、SLACK通知のサービスとあとクエリーサービスとAPIクライアントというのが必要そうですねと見えて

7
00:00:43,450 --> 00:00:45,340
くるので、まずは。

8
00:00:48,030 --> 00:00:55,200
SLACK通知のサービスが必要ですねと。

9
00:00:57,460 --> 00:00:58,300
見えてきます。

10
00:00:58,330 --> 00:01:00,760
なのでちょっとコピーして下に持ってきましょう。

11
00:01:12,760 --> 00:01:14,740
SLACK通知サービスがあります。

12
00:01:16,000 --> 00:01:18,700
そしてその後ろに。

13
00:01:23,410 --> 00:01:28,630
クリスサービスが必要なので、クエリーサービスを置いておきましょう。

14
00:01:29,890 --> 00:01:35,740
そして、これが通知先を取得するためのクエリーサービスです。

15
00:01:37,000 --> 00:01:41,980
なので通知先取得用のクエリーサービスに対して。

16
00:01:45,240 --> 00:01:47,190
リクエストを投げるので。

17
00:01:48,640 --> 00:01:50,080
ここにくっつけて分けて。

18
00:01:53,670 --> 00:01:54,450
こうですねと。

19
00:01:55,690 --> 00:01:58,600
なので通知先の。

20
00:01:59,600 --> 00:02:02,210
データを取ってきてほしいので。

21
00:02:03,530 --> 00:02:13,520
まず通知先の情報を取得という意味で、まあGETNOTIFYインフォぐらいの名前でいいんじゃないでしょうか。

22
00:02:13,760 --> 00:02:19,460
そして引数としてスタッフIDがあればいいんじゃないかなと思います。

23
00:02:19,490 --> 00:02:20,300
こうですね。

24
00:02:23,230 --> 00:02:24,610
そして。

25
00:02:25,770 --> 00:02:40,680
取得するべき通知先の情報が通知先としてエンティティーがもう用意してあるので、クエリサービスの次にはエンティティが生成されるというのが

26
00:02:40,680 --> 00:02:44,250
ここでご説明してあるので同じように。

27
00:02:47,020 --> 00:02:53,140
クエリーサービスの後にエンティティのインスタンス化を行ってあげましょう。

28
00:02:54,750 --> 00:02:56,070
そうすると。

29
00:03:03,040 --> 00:03:04,030
ここに。

30
00:03:05,580 --> 00:03:09,600
通知先っていうエンティティーがありまして。

31
00:03:10,420 --> 00:03:13,030
そしてその。

32
00:03:16,060 --> 00:03:18,610
実行に置いて。

33
00:03:21,660 --> 00:03:26,130
NOTIFYインフォみたいなものが取れるとしておきましょう。

34
00:03:26,370 --> 00:03:30,000
そうするとEUで。

35
00:03:33,810 --> 00:03:34,590
ここですねと。

36
00:03:35,680 --> 00:03:42,190
クリエイトのニューNOTIFYホで通知先情報をインスタンス化して取ってきましょうとそういった具合ですね。

37
00:03:42,460 --> 00:03:47,380
そうすると通知先情報が取れたら。

38
00:03:50,040 --> 00:03:52,500
SLACK通知サービスに対して。

39
00:04:01,550 --> 00:04:06,350
インスタンス化したものが返ってきますねと、まずここまでがわかってきます。

40
00:04:08,250 --> 00:04:16,890
だから、そうすると通知先が取れたので、じゃあ次SLACKのAPIクライアントに通知を送信すれば終わりですよねと、それだけのシンプルな話

41
00:04:16,890 --> 00:04:17,820
になってきます。

42
00:04:18,589 --> 00:04:25,660
なので、SLACKのAPIクライアントをここに用意してあげて。

43
00:04:33,850 --> 00:04:39,850
そしてメソッドの実行範囲は、この辺に置いておけば良さそうですね。

44
00:04:47,480 --> 00:04:57,710
でとてきたインフォ情報を使ってSLACKのAPIクライアントに。

45
00:04:58,650 --> 00:05:01,740
リクエストを投げますと出。

46
00:05:02,700 --> 00:05:11,640
通知を送るのとエラーチェックというちょっと責務範囲が広いので、APIクライアントのメソッド実行範囲はちょっと長くなりそうなので、少し多めに

47
00:05:11,670 --> 00:05:12,540
取っておきましょう。

48
00:05:13,640 --> 00:05:23,900
そしてここにもうSLACKのAPIクライアントって責務がわかってるんで、先途っていうぐらいにしておけば、もう分かるんじゃないかなと思い

49
00:05:23,900 --> 00:05:24,380
ます。

50
00:05:24,860 --> 00:05:32,330
そして、引数に何を入れてあげようかと言うと、まずNOTIFYインフォ。

51
00:05:33,550 --> 00:05:45,430
の情報を入れてあげるんですけど、ただ情報を入れてあげるだけじゃなくて、NOTIFYインフォの中のトークン情報が欲しいでしょうと見え

52
00:05:45,430 --> 00:05:51,640
てくるので、NOTIFYインフォとトークンでトーク情報を取ってきてあげましょうという具合です。

53
00:05:51,940 --> 00:05:56,110
そして、何を送信したいかというと。

54
00:05:57,800 --> 00:06:06,590
このスレッドのサマリー情報を送信したいよねっていうふうにデータフロー図のタイミングで決めたと思うのでここで。

55
00:06:09,120 --> 00:06:12,870
スレッドサマリーという風に渡してあげましょう。

56
00:06:13,230 --> 00:06:20,070
なのでSLACKのAPIクライアントにトークン情報とあと、スレッドのサマリー情報を渡してあげましたとそういう具合です。

57
00:06:20,780 --> 00:06:30,620
そうするとSLACKの画面を通じてSDさんに情報が届くので、バウンダリーでSLACKを登場させてあげる必要がありそうです。

58
00:06:30,680 --> 00:06:32,690
あ、これですね。

59
00:06:32,690 --> 00:06:33,860
これを使っていきましょう。

60
00:06:39,790 --> 00:06:42,790
ここにSLACKを登場させてあげましょう。

61
00:06:47,100 --> 00:06:49,530
そしてもう一つ。

62
00:06:50,910 --> 00:06:54,030
SEさんが登場するので。

63
00:06:55,370 --> 00:06:59,270
SEさんもここに書いてあげましょう。

64
00:07:08,130 --> 00:07:08,970
ここですね。

65
00:07:10,270 --> 00:07:11,560
なのでここに。

66
00:07:14,400 --> 00:07:16,170
SEと書いてあげて。

67
00:07:19,790 --> 00:07:22,100
これでいいんじゃないでしょうか。

68
00:07:25,570 --> 00:07:25,580
は。

69
00:07:29,250 --> 00:07:31,170
そしてですね。

70
00:07:31,170 --> 00:07:33,270
やるべきこととしては。

71
00:07:36,800 --> 00:07:44,070
もうSLACKを通じてSEさんに情報が飛びましたよと明示してあげることなので。

72
00:07:49,130 --> 00:07:52,880
このSLACKAPIクライアントから。

73
00:07:54,700 --> 00:07:58,450
SLACKに対して通知を送信しますよと。

74
00:08:01,000 --> 00:08:09,670
で、これはもうこっちはSLACKのサーバーなので、こっちから何か操作することはできないので、もうメソッドの実行ではなくて送信するっていう

75
00:08:09,670 --> 00:08:11,380
日本語で書いておこうと思います。

76
00:08:11,860 --> 00:08:20,890
で、ここのSLACKサーバー内でエラーが起きると、こっちの範疇ではなかったりするんで、もちろん失敗パターンを想定しないといけないんです。

77
00:08:21,310 --> 00:08:22,990
そう考えると。

78
00:08:23,940 --> 00:08:29,190
条件分岐のこのALTERNATIVEを使ってすみません、ここREVのままでしたね。

79
00:08:29,190 --> 00:08:32,400
ここオルタナティブのオルソを書いておきます。

80
00:08:32,580 --> 00:08:39,030
このオルタナティブの結合フラグメントを使って失敗パターンを表現してあげないといけないんです。

81
00:08:39,690 --> 00:08:40,530
なので。

82
00:08:41,549 --> 00:08:44,760
ここで失敗パターンを表現するために。

83
00:08:46,700 --> 00:08:49,160
これを下に持ってきてあげて。

84
00:08:51,760 --> 00:08:54,460
まあ、何かしら条件分岐を与えてあげましょう。

85
00:09:05,120 --> 00:09:06,890
そうすると。

86
00:09:09,360 --> 00:09:18,510
まぁ、シンプルに条件分岐は成功と失敗でいいんじゃないでしょうか成功と失敗ですね。

87
00:09:25,710 --> 00:09:27,600
そして成功だと。

88
00:09:27,630 --> 00:09:31,950
もちろんシンプルに通知が届くと通知が届くと。

89
00:09:39,460 --> 00:09:50,860
なので、一応責務というかSLACKのSLACKサーバー内の実行中という意味合いで、まぁこんな風に。

90
00:09:52,630 --> 00:09:53,950
書いておいてあげましょう。

91
00:09:53,950 --> 00:09:55,480
そしてですね。

92
00:09:56,700 --> 00:10:05,550
通知が届くっていうのが成功パターンの処理だし、失敗したら通知が届かないので、何も起きませんねと。

93
00:10:05,880 --> 00:10:18,720
ただ、その代わりAPIレスポンスとして何かしら失敗を通知してあげないといけないし、成功なら成功で200万の通知を飛ばしてあげなきゃいけ

94
00:10:18,720 --> 00:10:19,710
ないので。

95
00:10:21,780 --> 00:10:21,870
林。

96
00:10:22,920 --> 00:10:23,610
ここで。

97
00:10:26,080 --> 00:10:31,810
成功だろうと失敗だろうとAPIレスポンスを取ってこれるようにしましょう。

98
00:10:35,680 --> 00:10:41,560
じゃAPIレスポンス撮ってきたらエラーチェックをしましょうという話ですね。

99
00:10:41,980 --> 00:10:52,630
でまぁ、エラーチェック用のクラスを別途定義したいところなんですけれども、シーケンス図にわざわざエラーチェックのクラスを書くことってあんまり

100
00:10:52,660 --> 00:11:02,020
ないので、レスポンスを受け取ったらそのまま内部でエラーチェックしましょうという具合にラフに書いておいていいので、内部チェックを意味する。

101
00:11:02,080 --> 00:11:04,660
このぐるっとした線を使っていきましょう。

102
00:11:06,790 --> 00:11:17,770
なのでAPIレスポンスを受け取ったら、エラーチェックっていう風に内部でセルフチェックが行われて。

103
00:11:19,930 --> 00:11:21,070
そして。

104
00:11:23,240 --> 00:11:28,430
このSLACKAPIクライアントの実行が終わったら。

105
00:11:31,850 --> 00:11:51,200
SLACK通知サービスにAPIレスポンスの結果を返してあげるので、内容としては実行結果、成功は失敗とこういう風に返してあげれば十分じゃ

106
00:11:51,200 --> 00:11:52,100
ないでしょうか。

107
00:11:54,190 --> 00:11:56,680
なのでまとめると。

108
00:11:58,660 --> 00:12:00,520
SLACK通知サービスが。

109
00:12:01,470 --> 00:12:07,410
コントローラーから依頼を受け取って、まずは通知TAKEクエリーサービスを通じて通知先から。

110
00:12:08,200 --> 00:12:11,560
情報を取ってくる外で情報を取ってきたら。

111
00:12:13,660 --> 00:12:20,140
通知情報からトークン情報を持ってきて、そして事前に持っていたスレッドのサマリー情報を。

112
00:12:21,070 --> 00:12:30,190
つらく、APIクライアントに渡して1000度メソッドを実行すると、そしてSLACKAPIクライアントがSLACKサーバーに通知を送信して成功すれ

113
00:12:30,190 --> 00:12:40,690
ば通知が届くし、失敗したら通知は届きませんとで、そのままほったらかしにするわけにはいかないので、APIレスポンスを受け取りますとAPI

114
00:12:40,690 --> 00:12:41,950
レスポンスが消えてますね。

115
00:12:41,950 --> 00:12:42,730
失礼しました。

116
00:12:43,930 --> 00:12:46,900
APIレスポンスを受け取りますと。

117
00:12:51,530 --> 00:12:53,990
APIレスポンスを受け取ります。

118
00:12:57,740 --> 00:13:07,880
そしてAPIレスポンスを受け取った後、エラーチェック用のクラスを使ってエラーチェックして、そして成功なのか失敗なのかっていうものをSLACK。

119
00:13:07,880 --> 00:13:11,270
通知サービスに返してあげると、そういった1連の流れですね。

120
00:13:12,370 --> 00:13:14,350
ここまでができると。

121
00:13:15,440 --> 00:13:25,280
もともと作っていたスレッド作成コントローラーからスレッド作成サービス、そしてスレSLACK通知サービスっていうところまで、さっきも範囲を制限せず

122
00:13:25,280 --> 00:13:26,690
に表すことができました。

123
00:13:27,140 --> 00:13:35,990
で、事前にお伝えの通り、スレッド画面に関しては大して処理はないので、もうご紹介するほどの新しい論点はないので、以上でワークを終えて

124
00:13:35,990 --> 00:13:37,190
いこうと思います。

125
00:13:37,370 --> 00:13:39,200
そうするとここですね。

126
00:13:40,910 --> 00:13:46,850
ロバストネス分析で書いた責務ごとのクラスに対して。

127
00:13:47,970 --> 00:13:51,600
メソッドの割り当てが行われたっていうところまでが完成しました。

128
00:13:52,050 --> 00:13:54,360
次のクラス図のワークでは。

129
00:13:55,460 --> 00:14:04,040
ここまで登場してきたクラス、そして一個一個のクラスが持つべきメソッドとか、属性とか詳細な情報を整理していくっていうところで、詳細

130
00:14:04,040 --> 00:14:06,860
設計ワークの着地に入っていこうと思います。

